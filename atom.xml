<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘广睿的思维实验室</title>
  
  <subtitle>理论都是灰色的 唯有生命之树长青</subtitle>
  <link href="https://liuguangrui.top/atom.xml" rel="self"/>
  
  <link href="https://liuguangrui.top/"/>
  <updated>2020-10-10T15:35:32.310Z</updated>
  <id>https://liuguangrui.top/</id>
  
  <author>
    <name>刘广睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《卡拉马佐夫兄弟》读书笔记</title>
    <link href="https://liuguangrui.top/archives/a541b16.html"/>
    <id>https://liuguangrui.top/archives/a541b16.html</id>
    <published>2020-10-09T14:33:48.000Z</published>
    <updated>2020-10-10T15:35:32.310Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>一粒麦子落在地里如若不死，仍是一粒；若是死了，就会结出许多子粒来。</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>再三思考后，我依然决定用俄罗斯作家陀思妥耶夫斯基的《卡拉马佐夫兄弟》作为第一篇读书笔记。这本书虽然不是我最近读完的，但却是我无时无刻不回味思考的书籍。《罪与罚》是我读陀思妥耶夫斯基的第一部作品，那时我就被他极具代入感的剧情与多元又深刻的思想深深吸引。这种多种哲学理论在各种终极哲学问题上碰撞并在人物关系与故事情节中逐渐体现的复调小说令我欲罢不能。随后我查阅了它的作品，紧接着读了这本令我震撼的《卡拉马佐夫兄弟》。本书虽然没有《罪与罚》那样紧张刺激，但其思想深度与对人性理解的透彻程度却令人瞠目结舌。随后我变废寝忘食的读完了《地下室手记》《白痴》《群魔》《死屋手记》《白夜》《少年》一系列陀思妥耶夫斯基作品，他的作品仿佛有一种魔力，使人深陷其中，而这种魔力名为“真实”。<br>在读《卡拉马佐夫兄弟》时，我完全没有读其它年代久远书籍因时代脱节而产生的无聊与乏味之感，也没有读其它俄罗斯作品因人名地名复杂冗长而引起的阅读障碍。本书剧情紧凑，人物关系也并不复杂，整体故事发生在几年以内。但其中每一个人物本身却极为复杂甚至多变，事实上陀思妥耶夫斯基晚安作品中的人物都有这种特点：一个角色的体内仿佛聚集了多个人的声音，很多角色直接出现了人格分裂的情况。这本书是我最难做笔记却又最想做笔记的作品，每翻开一页书，就能发现一段值得记录与思考的言论。</p><h1 id="1-人物介绍"><a href="#1-人物介绍" class="headerlink" title="1 人物介绍"></a>1 人物介绍</h1><p>费尧多尔·巴弗洛维奇·卡拉马佐夫<br>老卡拉马佐夫这个55岁的寄生虫和小丑在经历了两段婚姻后成为了三个儿子的父亲。不仅如此，传言中他还有第四个儿子，不过这个私生子帕维尔·斯乜尔加科夫 竟然被他以厨子的身份留在家中。可是，老卡拉马佐夫对于几个儿子都不感兴趣，正因为如此，这个家庭中的所有成员之间都充满隔阂。而老卡拉马佐夫 遭到谋杀和随即发生在他的大儿子德米特里身上的一系列事件构成了整部小说的主要情节。</p><p>德米特里·费尧多罗维奇·卡拉马佐夫<br>德米特里（米嘉、米剑卡、米特里）是老卡拉马佐夫的长子，也是老卡拉马佐夫第一次婚姻的唯一一个孩子。他继承了父亲好色的特质，这也使他与父亲常常起冲突。德米特里喜欢享受整夜的声色犬马和任何能带来刺激的娱乐，这使他很快耗尽资财，更诱发了他与老卡拉马佐夫更大的冲突。老卡拉马佐夫被谋杀后，他也因为父子间紧张的关系自然而然卷入了警方的调查。事实上，他的确在与父亲为同一个女人格露莘卡的争夺中差点想杀了他。</p><p>伊万·费尧多罗维奇·卡拉马佐夫<br>伊万是老卡拉马佐夫的次子。他是狂热的理性主义者，总困惑于莫名感受到的痛苦。就像他和阿辽沙在《反叛》（第五卷第四章）这一章中说的：“我并非不接受上帝的存在，只是我谢绝了他的拯救。”</p><p>伊万自幼就表现得不温不火，似乎隔离于世上的所有人。他虽然嘴上不说，但对老卡拉马佐夫恨之入骨。这份仇恨最后却演变成对于老卡拉马佐夫死的愧疚，让伊万最终精神崩溃。小说中一些相当难忘或精彩的片段中都有伊万的身影，包括《反叛》（第五卷第四章）这一章、紧接着的由他创作的诗剧《宗教大法官》，以及他关于魔鬼的噩梦（第十一卷，第九章）。</p><p>他也常被认为是卡拉马佐夫兄弟中最黑暗的一个。</p><p>阿列克塞·费尧多罗维奇·卡拉马佐夫<br>阿列克塞（阿辽沙、阿辽什卡）是老卡拉马佐夫最小的儿子。小说的开篇，讲述人即宣称他为故事中的主人公（而陀氏在序中也这样宣称）。在故事一开始，阿辽沙是当地修道院的见习教士。因此他的信仰从一开始便和哥哥伊万的无神论势不两立。他被佐西马神父送回尘世，随后就卷入了卡拉马佐夫家族肮脏不堪的迷局中。他还在旁支的故事中帮助了一群小学童，他们的命运给整部悲剧小说带来一丝希望。阿辽沙在小说中一般充当他的兄弟与其他人间的故事的传话人或是目击者。</p><p>帕维尔·费尧多罗维奇·斯麦尔加科夫<br>斯乜尔加科夫的母亲“发出臭气的Lizaveta”是街头上的聋女，他的名字也取自“发臭气人的儿子”的谐音。街坊都传他是老卡拉马佐夫的私生子，而故事一开始他便在老卡拉马佐夫家当仆人和厨子。他沉默寡言、闷闷不乐，和陀思妥耶夫斯基一样是个癫痫患者。还是个孩子时，他喜欢收集流浪猫，却只是为了把他们吊死并埋了。斯麦尔加科夫总是形单影只，却对伊万有着特殊的钦佩并和他一样接受无神论，他甚至还向伊万承认是自己而不是德米特里杀了老卡拉马佐夫，同时声称是受了伊万的指使。他的名字在俄语中还有“蠢蛋”、“无耻之徒”的意思。</p><p>阿格拉菲娜·亚历山德罗芙娜·斯维特洛娃<br>阿格拉菲娜·斯维特洛娃（格鲁申卡，格露莎）是当地有名的荡妇，对于异性有着难以解释的吸引力。年轻时，她曾被波兰军官抛弃，如今正被一个残暴的吝啬鬼包养。与此同时，老卡拉马佐夫和德米特里都为她倾倒，这对父子的情敌关系更直接使德米特里卷入老卡拉马佐夫被害的事件当中。可这对父子如此为情所困，却换来格鲁申卡的玩弄与嘲笑，甚至被包养她的吝啬鬼好好伤害了一把。不过随着故事的发展，她却变得几近宽宏大量。</p><p>卡捷琳娜·伊万诺芙娜·维尔霍夫策娃<br>卡捷琳娜·伊万诺芙娜（卡嘉，卡笺卡）是德米特里的未婚妻，虽然他和格露莘卡有如此公开的奸情。她之所以会被许配给德米特里就是因为他为自己父亲的债务埋了单。与此同时伊万也爱着她，而她似乎也一贯以傲慢示之。不仅面对伊万，卡笺卡的“高尚”、“慷慨”和“宽容”也在故事的开始时时体现，甚至让人将这些品质与她完全画上等号；她却在后来堕落的过程中不断地冷冰冰地提醒着所有人的罪。在审判的结尾，一切都证明了卡笺卡并不比小说中的任何一个人物多余。即使是在结尾她向米剑卡忏悔并答应帮助他出逃时，面对进入医院病房的格鲁申卡，卡笺卡显然还是无法放下自己的身段。</p><p>丽萨·霍赫拉科娃<br>丽萨·霍赫拉科娃（Lise、莉兹）是个十四岁的少女，富有寡妇霍赫拉柯娃的独生女，也是阿辽沙的青梅竹马，幼时曾和阿辽沙在莫斯科有所来往。她的腿部有残疾，需以轮椅代步。倾心于阿辽沙，曾送情书给他，两人私订终生。她有歇斯底里的倾向，但同时也极富有同理心，善于理解他人的心理，曾向阿辽沙剖析伊柳沙的父亲拒收两百卢布背后的心理。在邻近结尾时托阿辽沙送了一封信给伊万，但那封信被伊万撕成碎片，在作者未写续作即过世的情形下，无从得知此伏笔的确切情形。</p><p>佐西马长老<br>佐西马神父是阿辽沙在小镇修道院时的老师，也是修道院中的长老。因为他预知未来、替人治病传闻，所以在镇中也是个名人，同时也为他在众僧侣中带来了崇拜与嫉妒。小说中，佐西马长老曾经驳斥过伊万的无神论，但更多时候他充当的是一个解释和发展阿辽沙人格的角色。伊万关于其无道德论的辩护至多也是毫无根据，不过却反应了他的人格与家教。佐西马长老的教育决定了阿辽沙日后在伊柳沙故事一线中对待学童的方式。</p><p>2 故事梗概<br>本书以卡拉马佐夫一家四口为主角来创作的，而作者在作品中使用的第三视角记叙，也就是一个目睹了卡拉马佐夫一家的故事的同城人视角写的。作者在开头与行文中多次明确这一视角，所以文章中就会提出作者对于某些细节不清楚，忘记了，或者认为没必要讲。由于这种记叙模式，读者理解这个故事是建立自别人对卡拉马佐夫故事的了解之上的，所以书中有一定的思想与理念是讲述人传递给读者的，也就是陀思妥耶夫斯基想要表达的想法。<br>故事里老卡拉马佐夫是一个略有些神经质，脾气古怪、贪慕钱财缺少仁义的嗜酒老头。他一共有三个小孩，其中老大米嘉是原配夫人所生，老二伊万和老三阿辽沙是续弦夫人所生。三个孩子性格迥异。<br>故事的前半部分围绕老卡拉马佐夫与米嘉喜欢上了同一个女人而争风吃醋展开，但本书绝不是简单的爱情故事，本来就因为财产问题就有了深深隔阂的父子俩，又因为互为情敌，陷入到无休无止的相互仇恨之中。<br>与此同时，聪明而又富有才思的伊万开始思考上帝的存在是否真实，思考人类善与恶的本源，为了表达他的内心，并向阿辽沙口述了他创作的长诗《宗教大法官》，这部长诗是本书的一个高潮，也是了解伊万的一个重要切入口。<br>而此时善良又真诚的阿辽沙面临着最敬重的老师——佐西马长老逝去的悲痛。<br>故事的后半部分致力于找出杀死老卡拉马佐夫的凶手，但是本书绝不是简单的侦探故事，米嘉因为涉嫌谋杀父亲被捕；伊万陷入到自我苛责，病入膏肓；阿辽沙虽然从长老葬礼的阴影中走出，并用自己的真诚赢得了几乎每一个人的信任与喜爱，但也没有在法庭上帮助米嘉脱罪。由于第二部未完成，最后我们不知道三兄弟的未来，文章结尾描写三兄弟打算去帮助米嘉出国逃跑，但结果如何并不知晓。英国书评家图尔特凯利在《失落的书》中记载曾经有一名记者讲过陀思妥耶夫斯基未完成的第二部内容大纲，里面写到：“虔诚的阿辽沙将会离开修道院走向堕落，他变成了一名无政府主义者，一名革命党人。纯洁善良的阿辽沙将引领卡拉马佐夫兄弟刺杀沙皇！然而他最终悔过，并在修道院终老一生。”</p><p>米嘉与两个女人产生了情感纠葛，呈现了爱情的复杂。<br>伊万对世界的怀疑与思考，他自己体内的恶魔。<br>阿辽沙的虔诚对佐西马长老的敬爱和长老死后的堕落与迷茫产生强烈对比。<br>卡拉马佐夫兄弟家里有一个疑似老卡拉马佐夫私生子的仆人斯乜尔加科夫。虽然他平时很不起眼，但是他的存在也凸显了书中诠释的卡拉马佐夫精神，卡拉马佐夫精神是卡拉马佐夫一家人都秉持的一种精神，即敢爱敢恨、无所畏惧、尊崇本性、不受约束、极度自我近乎自私的精神。什么都不要怕，什么都不要管，如果你爱，那就去爱，做出爱产生的行为，如果你恨，那就去恨，做出恨产生的行为。像是阿辽沙，爱生活，如果它值得被爱，那就超越逻辑的去爱生活，爱生活胜于爱生活的意义。像是米嘉，恨父亲，如果它的确可恨，那就超脱道德的去恨父亲，恨这个人即便他是父亲。</p><p>3 精彩桥段<br>3.1 长老的劝诫<br>一位女士请教佐西马长老关于“怎样去爱这个世界？为什么要爱世人？”，佐西马长老讲述了多年前他和一位在战场上救治了无数病人的德高望重的医生的谈话，医生也提出了相似的问题，他说，我爱人类，但是自己觉得奇怪的是我对全人类爱得越深，对单独的人，也就是对一个个个别的人就爱得越少。他说，我在幻想中屡次产生为人类服务的热望，也许真的会为了人类走上十字架，如果忽然有这个需要的话，然而经验证明，我不能同任何一个人在一间屋里住上两天。他刚刚和我接近一点，他的个性就立刻妨碍我的自爱，束缚我的自由。我会在一昼夜之间恨起最好的人来：恨这人，为了吃饭太慢，恨那人，为了他伤风，不断地撸鼻涕。他说，只要人们稍微碰我一下，我就会成为他们的仇敌。然而事情常常是我对于个别的人越恨得深，那么我的对于整个人类的爱就越见炽烈。<br>而佐西马长老的劝诫是：去爱具体的人，也就是一个一个具体的人，而不是爱一个虚构的“人类”概念。唯有爱具体的人，才能真切的感受到对世界的爱。</p><p>3.2 宗教大法官<br>《宗教大法官》是伊万创作的长诗，他将诗口述给阿辽沙，在这部诗里面讨论了苦难和罪恶应该有谁来负责、上帝存在的意义究竟是什么、幸福来源于自由还是奴役。同时引发了三退魔诱、二律背反等多种宗教哲学思考。这首诗很长，其中讲述了耶稣降临世间，令死人复活、给予世间神迹、让人获得自由，但宗教法官、耶稣会教士却逮捕了耶稣，称耶稣这是违背规则，耶稣的降临时一种罪过，称耶稣是有史以来最邪恶的异端。因为正是是宗教大法官们阻止了人们的自由而后给予了人们幸福，他们凭借上帝的名义使人们心甘情愿的将自己的自由上交教会，自己把自由乖乖地放到宗教法官的脚边，从此人们停止了无休无止的自相残杀、相互猜疑。我个人没有宗教信仰，但我承认上帝或者说宗教信仰对国家、集团与个人的必要性，但这主要是读《理想国》与《1984》中形成的观点，而此书也透过此诗，阐释了作者认为的宗教本质。由于篇幅关系，此处只做部分摘抄，但也可管中窥豹。<br>十八世纪有个年老的罪人说过，如果上帝不存在，必须把他造出来，如果上帝不存在，必须把他造出来。人果然造出了上帝。奇怪的并不是上帝确实存在，这一点并不神妙，神妙的是这一思想——上帝必不可少这一思想——居然会钻到人这样一种野蛮而凶恶的动物头脑中去，因为这个思想是在太神圣、太感人、太英明了，它给人类增添了太多的光彩。至于我，我早已拿定注意不去考虑：是人创造了上帝，还是上帝创造了人？<br>“我想，如果世上不存在魔鬼，那么是人创造了魔鬼，是人按照自己的模样造出了魔鬼。”<br>“就是说，跟上帝一样。”<br>上帝与魔鬼在哪里搏斗，战场便在人们的心中。</p><p>谁掌握着人们的良心和面包，就该由谁来统治他们</p><p>建塔的目的并不是为了从地上登天，而是把天挪到地上来。</p><p>知道吗，世上太需要荒唐了。这世界就是靠荒唐支撑起来的，要是没有荒唐，世界只是一潭死水。</p><p>对于人和人类社会来说，从来没有任何东西比自由更无法忍受的了！</p><p>对人来说，安宁甚至死亡比在认识善与恶方面的自由选择更可贵。最能吸引人的莫过于让他的良心得到自由，但最折磨人的也莫过于此。</p><p>如果没有人造出上帝来，也就根本没有文明。</p><p>人一旦否定了奇迹，也就否定了上帝，因为人寻找的与其说是上帝，毋宁说是奇迹。</p><p>没有批评岂不是一篇歌功颂德声？但生活不能光唱赞美诗，必须让赞美经过怀疑的熔炉接受试炼。</p><p>在现实主义者身上，并不是奇迹产生信仰，而是信仰产生奇迹。</p><p>3.3 长老的葬礼<br>佐西马长老临终时送给阿辽沙一句话：“一粒麦子落在地里如若不死，仍是一粒；若是死了，就会结出许多子粒来。”这是《圣经》约翰福音中的一句话。佐西马长老是一位高尚的修士。生前人们崇拜他，相信他能治百病，他预测的未来一一应验，人们将长老当做圣徒看待。他死后，人们期待神迹发生，期待长老的尸体不朽、散发花香、甚至复活。可是事实相反，由于葬礼时没有开窗，长老的尸体快速的腐烂发臭，比正常尸体臭的更快。在场的人们逐渐纷乱，窃窃私语。他们失望、怀疑、流言蜚语、直至落井下石，诋毁中伤。<br>这段内容其实跟宗教大法官形成互文性，人民在心底渴望奇迹，只有神迹才能给人最大的安慰和信仰动力。自由不能带给人安全感，权威和奇迹却可以。没有神迹人们便会疏离信仰，疏离自由意志。一个强大的依靠，哪怕是暴政，也比自由状态下的无所适从要好。与其说人们寻求的是信仰，不如说人们寻求的是奇迹。<br>这个情节的设置也是对阿辽沙考验，阿辽沙此前的善良与虔诚也是建立在奇迹之上的，在他见到长老尸体腐烂后，也开始了动摇。但最令阿辽沙动摇的其实不是尸体发臭这件事，而是这次葬礼让他看到了人性的丑恶，他发现人们的并不是因为虔诚的信仰才追随长老，因为当长老尸体发臭后，舆论迅速倾倒向长老的对立教派。更进一步的阿辽沙看到了人们甚至非常爱看正人君子的堕落和出丑，人们从落井下石中获得了快感。幸运的是阿辽沙凭借自己的力量走出了这次信仰崩塌，重拾了爱生活胜过爱生活的意义的理念。</p><p>3.4 伊万的梦魇<br>伊万的梦魇发生在伊万得知杀死父亲的不是大哥米嘉而是仆人斯乜尔加科夫之后，正是伊万自己向斯乜尔加科夫灌输了杀死父亲的思想理念，并向他讲述了他自己认为的“人神”可超越道德与法律的对世人做出审判。伊万痛苦的认为是自己引导斯乜尔加科夫杀死了父亲，虽然伊万的确也恨父亲，但他依然承受不了这样良心的谴责，尤其在斯乜尔加科夫将一切真相告诉他后便自杀了。<br>事实上《伊万的梦魇》一章是《宗教大法官》一章的变体。《宗教大法官》用敏锐的洞察力呐喊出世间真相，而《伊万的梦魇》用绝望的理性预言了人类的未来。<br>伊万的思想类似于《罪与罚》中主角的超人逻辑，即在他认清上帝本质并否定上帝之后，那么一个认识到新的“真理”的人，就可以超越一切旧世界的道德与良心为所欲为，这样新人可以以“人神”的形象出现在世人面前，法律无法限制他的行为，他将带领其余的凡人走向新世界，那个世界无限完满与和谐。《宗教大法官》中的宗教法官便是这样一位“人神”，他违背基督定下的自由信条，驱逐上帝成为人类新的“领路人”，带给人们无尽的幸福。然而伊万不同于《罪与罚》的主角，伊万是一个伟大思想者，却畏惧实现他思想的行动，伊万最大的特点就是思想和行动的分离。在伊万想走“人神”的第一步时就遇到了困难，他想以“人神”的权威对自己的父亲老卡拉马佐夫进行审判并摧毁。但是他却一直不行动，犹豫不决，采取观望态度。渐渐地他找到了与他气质相似的仆人斯乜尔加科夫，他将自己的理念灌输给了斯乜尔加科夫，而后者在接受了伊万的信条后，竟很快的出于仇恨与利益谋划了一场杀死老卡拉马佐夫也就是他父亲的完美犯罪。并将罪责嫁祸于米嘉，将罪原嫁祸于伊万。当然作为老卡拉马佐夫的私生子，仆人斯乜尔加科夫也对父亲深恶痛绝。伊万是一位深邃的思考着，而斯乜尔加科夫是一位野蛮的行动者。<br>伊万在梦中遇见了另一个自己：一个衣衫不整的恶魔。伊万与恶魔的对话正是他的深邃的思维与他残存的良心的对抗。伊万在思想的道路上走得太远，以致他因无法辨别方向而恐慌。书中伊万思想之深邃已达到了“闪耀上帝的火花”，但同时他又怀疑上帝和信仰，在理性与信仰问题上他无法获得答案。经理多次信仰失败之后，终于，从帮助一位倒在雪地里的醉汉开始，伊万找回了卡拉马佐夫精神，遵从心灵的呼唤，上法庭自首。在良心、思想与信仰中找到了答案。</p><p>3.5 法庭辩论<br>律师的辩护是总结全文性的一场演讲，是作者向我们传达的价值观。是俄罗斯司法体系与卡拉马佐夫精神的一场战役。</p><p>审判前夕以及审判当中每个人物的内心剖白以及检察官和辩护律师的陈词，将卡拉马佐夫家族的精神画卷如史诗般呈现，彻底揭示了在命运的暴风雨中每个灵魂的震荡与飘零。</p><p>这次辩论借辩护律师之口，作者表达了法律应有的样子并讨论了父母应该如何养育孩子的问题。</p><p>本章的内容无需再做任何总结，我将直接摘出辩护人最后演讲的重要片段，其中内涵已展现的淋漓尽致。</p><p>刚才我曾发问“父亲”这两个字意味着什么，我说这是两个伟大的字，是个宝贵的名称。但是陪审员先生们，使用名称可马虎不得，我要实话实说，向被杀的老卡拉马佐夫这样的父亲，就不能也不配称为父亲。爱一个不配做父亲的父亲是荒谬的，不可能的。爱不能凭空创造出来，只有上帝才凭空创造世界。<br>首先，我们自己要实现基督的训示，然后才能要求我们孩子。否则，我们就不是父亲，而是我们孩子的敌人。他们也就不是我们的孩子，而是我们的敌人，是我们自己把他们变成了我们的敌人。你用什么量器量给人，人必用什么量器量给你（出自《圣经——福音书》）。你们自己怎样对待别人，别人也会怎样对待你。如果孩子用你的办法对待你，怎么能责怪孩子呢？<br>陪审员先生们，假定我们孩子已经是青少年，假定已经用理性思考，你们以为他们不会产生这些问题吗？看到自己的不称职的父亲，特别是跟同年龄其它孩子称职的父亲进行比较，会使一些恼人问题在青少年的脑中油然而生，他们这些问题通常只能得到例行公事式的答案：他生了你，你是他的骨肉，因此你必须爱他。青少年会不由自主的陷入深思：他生我的时候难道爱我吗？他生我难道是为了要我吗？在那个时刻，在或许是被酒激起了情欲的时刻，他连我是男是女也不知道，他传给我的只是纵酒的嗜好，这就是他干的好事，那为什么我必须爱他，难道仅仅因为他生了我，而以后从来没有爱过我？<br>重要的是我们应该按理性和仁爱的指示，而不是按神秘主义观念的要求来处理问题。那怎样处理呢？应该这样。让儿子站到父亲面前，正经八百的问他本人：“父亲，告诉我，为什么我应当爱你？父亲，你得向我证明我应当爱你。”如果这位做父亲的答得上来，并且能向他证明，那么这就是一个真正的，正常的父子关系。不是仅靠神秘主义的偏见维系，而是建立在理性、清醒和严格合乎人道的基础之上。相反如果做父亲的无法证明，这个家庭也就完了，他不在是儿子的父亲，而做儿子的从此获得自由，今后有权把自己的父亲世同陌路，甚至视为自己的敌人。陪审员先生们我们的讲坛，应该成为宣扬真理和明智观念的学校！<br>宁可放过十个罪人，也不惩罚一名无辜。你们是否听到了上个世纪我们光荣的历史上这个伟大的声音。用不着区区在下提醒各位，俄国的法庭不光是惩处罪犯，也要挽救罪犯。让别国的法律去考虑条文和惩治吧，我们应该着眼于精神和内涵，拯救罪犯并是他们重新做人。我的当事人的命运掌握在你们手中，我们的俄罗斯真理也掌握在你们的手中。你们将拯救真理、捍卫真理，向世人证明有人维护真理，真理掌握在好人手中。</p><p>这一段对做父母的启发意义很大，尽管中国传统文化讲孝道，中国的父母大多是抱着“养儿防老”的心态生养孩子，我的父母一辈人骂孩子还常用“不还债”。生养是大恩，但也不能要求从没被爱过的孩子无条件的回报爱。</p><p>想想这个情景，孩子站在你面前问“我为什么应该爱你？”想想你的回答，想想你是否值得孩子的爱，反思自己的行为和要求。</p><p>一个孩子会有这样的疑问，我为什么要爱我的父亲，</p><p>4 个人感悟<br>本书中<br>阿辽沙是一个虔诚善良的人，是世人幻想中完美的人物，伊万是一个不停反思，思想深邃但黑暗而纠结的人，是作者眼中的自己，米嘉是一个真情亲，敢爱敢恨，善恶参半的人，是作者表达的世人真正的模样。作者希望告诫世人不要沉醉追寻像阿辽沙一样幻想中的完美人物，也不认为一个像伊万一样陷入思想矛盾苦恼的人是明智的，作者希望人们去爱米嘉一样真实的人,去爱他去成为他，去做一个存在于人世间的人而不是一个由理论搭建受逻辑束缚的人。<br>我们对这个世界的认知，不来自我们自己<br>卡拉马佐夫兄弟对人性的分析还可以继续深入吗，我认为还有深入的可能，而接下来可能就会讨论到人类的生存本能，人作为一种存在于地球中的一种哺乳动物的本能，所谓人性与兽性的关系等等。</p><p>附录<br>附录1 好句摘抄<br>附录2 名家书评<br>附录3 推荐版本<br>卡拉马佐夫兄弟是我在读</p><p>宗教大法官<br>长老的葬礼<br>伊万的梦魇<br>律师的演说</p><p>一旦您恐慌的发现，尽管您做了一切努力，您非但没有向目标靠近，反而像是离得更远了，——恰恰在那个时刻，我可以向您预言，您将一下子达到目的地</p><p>一粒麦子落在地里若不死，仍是一粒；若是死了，就会结出许多粒来</p><p>越是愚蠢，就越切题。越是愚蠢，就越明白。愚蠢是简单朴素的，而智慧是拐弯抹角、躲躲藏藏的。智慧是卑劣的，而愚蠢是直率和诚实的。</p><p>整个世界早已走上另一条道路，我们把十足的谎言当做真理，还要求别人也说谎。</p><p>如今人人都力图最大限度地各自为政，都想在自我封闭的状态中追求生活的完满，其实他们的一切努力并不能得到生活完满的结果，只能是彻底的自我毁灭，因为充分确立自我非但没有成功，反而陷入十足的自闭。</p><p>要知道，最崇高的精神力量，在今后的生活中对身心最有益的感受，莫过于某种美好的回忆，尤其是童年时代从故乡故居保留下来的回忆。……而某一段从童年时代保留下来的美好而神圣的回忆或许正是最好的教育。</p><p>理智认为是耻辱的，感情偏偏当做绝对的美。</p><p>“良心！良心算什么？我自己就会做良心。我为什么苦恼？就是习惯。那是七千年形成的全世界人类的习惯。将来戒掉了这种习惯，咱们就成了神。”</p><p>在大多数情况下，人们，甚至恶人，要比我们想象中的他们幼稚得多、天真得多。其实我们自己也一样。</p><p>“当然，他们有苦难，但是……他们毕竟活着，活得实在，并不虚幻；因为苦难就是生活。没有苦难，生活还有什么乐趣……岂不成了一场没完没了的教堂礼拜？尽管很神圣，可也太乏味了。</p><p>正常的父子关系，不是仅靠神秘主义的偏见维系，而是建立在理智，清醒和严格合乎人道的基础之上。</p><p>要爱一个人，那个人必须隐藏起来，只要一露面，爱就消失了。</p><p>他已经多少有了我们这个时代的青年人的气质：本性诚实，渴望真理，寻求它，又信仰它，一旦信仰了以后就全心全意献身于它，要求迅速建立功绩，抱着为此甘愿牺牲一切甚至性命的坚定不移的决心。然而，不幸这些青年人往往不明白在许多类事情上牺牲性命也许只是一切牺牲中最容易的一种；譬如说，从青春洋溢的生命中，牺牲五六年光阴去从事艰难困苦的学习、钻研科学，哪怕只是为了增强自身的力量，以便服务于自己所爱的真理，和甘愿完成的苦行——这样的牺牲就有许多人办不到。阿辽沙虽选择了和大家完全相反的道理，但仍带着同样的渴求、迅速立功的心情。他刚刚经过严肃的思索后，突然对灵魂不死和上帝的存在产生了确信，就立刻毫无做作地对自己说:”我甘愿为探寻灵魂不死而生活，决不半心半意。”</p><p>即使我看不见太阳，我也知道太阳存在着。知道太阳存在，就已经是全部生活。</p><p>最崇高的精神力量，在今后的生活中对身心最有益的感受，莫过于某种美好的回忆，尤其是童年时代从故乡故居保留下来的回忆。<br>关于你们的教育问题人们经常向你们谈起，而某一段从童年时代保留下来的美好而神圣的回忆或许正是最好的教育。如果能带着很多这样的回忆走向生活，这个人便可终生得救。即便只有一段美好的回忆留在我们心中，有朝一日它也会有助于我们得救。或许将来我们甚至会变得凶恶，甚至不能悬崖勒马而干出丑行坏事，或许会拿别人的眼泪开心。</p><p>————-美丽新世界—————<br>国家的口号是和谐稳定，国家的美德是热爱劳动。在这个国家主义的美丽新世界，人类只具有身体上的意义，身体之外的思想、感情、意志都被彻底铲除。毫无疑问，这是一个完美的公司化的国家，却是人类的地狱</p><p>有一种东西叫做自由主义：不称职的自由，受苦的自由，不合时宜的自由。 有一种东西叫做民主。好像人和人之间除了物理和化学性能平等之外还有什么别的东西也会平等似的。</p><p>他们会思考，这是对社会稳定的潜在威胁。<br>———–娱乐至死—————–<br>真理被淹没在无聊琐碎的世事中，人们在汪洋如海的信息中日益变得被动和自私，文化成为充满感官刺激、欲望和无规则游戏的庸俗化，我们将毁于我们热爱的东西。</p>]]></content>
    
    
    <summary type="html">卡拉马佐夫兄弟是陀思妥耶夫斯基创作的最后一部长篇小说，被认为是他文学创作中的巅峰之作。本书根据一桩真实的弑父案写成，作者曾构想将这篇鸿篇巨制作为另一部更加宏大的作品《一个伟大罪人的一生》的铺垫，但未能如愿，在打算撰写第二部时，作者不幸去世了。从表面上看这个作品讲述了一桩弑父案和一次错误的审判，但深层次上，这是一次讨论信仰、理性、道德与自由意志的哲学思辨。自出版以来，这部作品曾被托尔斯泰、爱因斯坦、弗洛伊德以及教宗本笃十六世等不同领域的人物给予极高评价。</summary>
    
    
    
    <category term="读书笔记" scheme="https://liuguangrui.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="俄罗斯文学" scheme="https://liuguangrui.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="俄罗斯文学" scheme="https://liuguangrui.top/tags/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%87%E5%AD%A6/"/>
    
    <category term="陀思妥耶夫斯基" scheme="https://liuguangrui.top/tags/%E9%99%80%E6%80%9D%E5%A6%A5%E8%80%B6%E5%A4%AB%E6%96%AF%E5%9F%BA/"/>
    
    <category term="卡拉马佐夫兄弟" scheme="https://liuguangrui.top/tags/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——模型窃取</title>
    <link href="https://liuguangrui.top/archives/7bfc85ae.html"/>
    <id>https://liuguangrui.top/archives/7bfc85ae.html</id>
    <published>2020-10-08T12:33:41.000Z</published>
    <updated>2020-10-10T14:59:04.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1 技术简介"></a>1 技术简介</h1><p>模型窃取指通过黑盒探测来窃取模型甚至恢复模型的训练样本数据。如今我们进入到了一个机器学习即服务（Mlaas）的时代，很多公司训练机器学习模型分类器并向用户付费提供接口来获取利润。公司不希望自己消耗大量资源训练的分类器可以被竞争对手轻松复制，如何保护机器学习模型本身不被复制与窃取逐渐成为工业界重要需求之一。另外模型窃取攻击直接对用户隐私造成威胁,攻击者只需要拖过一个人的姓名，就可以通过不断在黑盒模型中不断测试输入输出，最终从噪音文件逐渐逆向出个人照片。<br><img src="/images/20201008-4/1.webp" alt="利用模型逆向通过姓名获取照片"><br>机器学习分类器被发现存在可移植，如果两个模型的功能相似，即便它们们使用的机器学习算法不同，同一对抗样本也可能对他们都有攻击效果，右图为模型可移植性比较。即如果模型A为SVM（支持向量机）而模型B为DNN（深度神经网络），它们使用同一训练样本集学习，理论上由于内部算法不同，其分类面结构应该大相径庭，然而实现发现在模型A上计算生成的对抗样本有64.34%的概率在模型B中也能产生对抗效应，这使得防御模型窃取成为抵御对抗攻击的重要前提。<br><img src="/images/20201008-4/2.webp" alt="机器学习可移植性比较"></p><h1 id="2-攻击方案"><a href="#2-攻击方案" class="headerlink" title="2 攻击方案"></a>2 攻击方案</h1><p>已发现的模型窃取技术可以总结为模型萃取、成员推断和模型逆向。</p><div class="note danger">            <p>模型萃取攻击</p>          </div><p>模型萃取攻击指攻击者通过大量记录对一个黑盒机器学习模型的输入输出测试，将其作为自己模型的输入输出进行训练，使自己的模型越来越逼近目标模型，以达到复制并窃取模型的目的。攻击者首先模糊测试目标分类器的分类算法并大致拟合模型分布，形成一个影子模型（shadow model）。然后分析影子模型各类别边界并在边界采样，形成边界样本集。最后将边界样本集分别输入影子模型和目标模型，对于分类结果不同的样本，将其标签设置为目标分类器结果并加入到作为影子模型的训练样本中。循环此过程是影子模型最终无限接近目标模型。</p><div class="note danger">            <p>成员推断攻击</p>          </div><p>成员推断攻击指攻击者希望分析某样本是否在模型的初始训练集中。可以执行这种攻击的依据是模型对于待识别样本在其初始训练集中这个条件的真与假会表现与其分类过程与结果中。比如置信度、准确率甚至判别速度、模型耗能等因素会因待识别样本是否在训练集中而有不同，手机这些信息并对其进行建模。最终可以得到一个判断样本是否在模型训练样本中的二元分类器。</p><div class="note danger">            <p>模型逆向攻击</p>          </div><p>模型逆向指攻击者可以通过模型的输出逆向出模型的出入。对于人脸识别系统，攻击者可以通过个人信息如姓名逐渐从噪音文件逆向出个人照片。一般攻击者对攻击目标有一个模糊的范围，通过不断测试模型的输入输出，可以逐渐缩小范围以锁定目标文件。</p><h1 id="3-防御方案"><a href="#3-防御方案" class="headerlink" title="3 防御方案"></a>3 防御方案</h1><p>目前比较有效的防御方案是模型水印和联邦学习。</p><div class="note success">            <p>模型水印技术</p>          </div><p>模型水印主要防御模型窃取攻击。模型水印可以理解为模型制作者在模型中留下一个后门，在使用这个模型前必须通过这个后门，模型才可以正确运行。由于模型萃取技术很难将分类器细节还原，对于后门信息攻击者无法有效萃取。</p><div class="note success">            <p>联邦学习技术</p>          </div><p>联邦学习主要防御成员推断与模型逆向攻击。联邦学习指的是每个用户使用自己的模型训练自己的数据集，最后统一调和所有用户的模型参数，得到一个最终模型。由于最红模型的输入不是用户的初始数据，攻击者逆向出原始训练数据的难度很大。</p>]]></content>
    
    
    <summary type="html">模型窃取（Model Stealing）指通过黑盒探测来窃取模型甚至恢复模型的训练样本数据。本文首先简要介绍了模型窃取攻击技术，并分析了其对用户的危害以及企业界的需求。然后详细讲解了模型萃取、成员推断与模型逆向三种攻击的具体实现。最后介绍了两种较为有效的防御手段。</summary>
    
    
    
    <category term="科研总结" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://liuguangrui.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="https://liuguangrui.top/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="模型窃取" scheme="https://liuguangrui.top/tags/%E6%A8%A1%E5%9E%8B%E7%AA%83%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——数据投毒</title>
    <link href="https://liuguangrui.top/archives/e598100d.html"/>
    <id>https://liuguangrui.top/archives/e598100d.html</id>
    <published>2020-10-08T07:33:36.000Z</published>
    <updated>2020-10-10T14:54:34.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1 技术简介"></a>1 技术简介</h1><p>数据投毒指通过污染训练样本达到改变分类器边界的目的。数据投毒一般发生在在线学习系统中。阿里巴巴在2019年公司安全报告上称他们收到了一种模型偏斜的数据投毒攻击，在最开始阿里巴巴安全部报告称他们持续的接收到某种低级的攻击流量，这种流量可以轻易地被阿里入侵检测系统拦截。令人不解的是攻击者明知道这种攻击会被拦截，并不能达到攻击效果，但是他们依然不停的发送这种低级的攻击流量。最后阿里安全部门才发现攻击者前后发送了两轮攻击流量，第一批低级攻击流量的目的不是为了进入公司内网，而仅仅是为了干扰入侵检测系统，发送集中于模型边界的大量恶意样本，使模型黑白样本分布不均匀，致使推动模型边界，使模型偏斜。而第二轮攻击流量是一批对抗攻击流量，原本就在模型边界的对抗样本，在模型偏斜之后，更容易的绕过了入侵检测系统的过滤。<br><img src="/images/20201008-2/1.webp" alt="Google 垃圾邮件识别系统受到数据投毒攻击"></p><h1 id="2-攻击方案"><a href="#2-攻击方案" class="headerlink" title="2 攻击方案"></a>2 攻击方案</h1><p>已发现的数据投毒技术有反馈化武器，模型偏斜和后门攻击。为便于理解，每种攻击方式使用简易图示辅助介绍：图中橙色线表示原始分类边界，紫色线表示被篡改后的分类边界。蓝色叉号表示恶意样本，绿色圆形代表白样本，红色边缘的样本为攻击者构造的样本。骷髅表示被攻击者利用的区域。</p><div class="note danger">            <p>反馈化武器</p>          </div><p>一般用于将样本标签决定权交给用户的机器学习模型。由于攻击者可以有意的将样本标记为错误的分类器，这种模型如果没有有效的保护手段，很容易受到攻击。分类边界会被不断拉偏最终导致整个模型分类结果不可靠。<br><img src="/images/20201008-2/2.webp" alt="反馈化武器"></p><div class="note danger">            <p>模型偏斜攻击</p>          </div><p>如上所述，攻击者通过集中投放位于模型边界的样本，使模型样本分布不均匀，模型为了寻找最优分割面，会改动其分类边界，使攻击者可以利用分类界面附近的危险区域。其一般伴随对抗攻击同时出现。<br><img src="/images/20201008-2/3.webp" alt="模型偏斜"></p><div class="note danger">            <p>后门攻击</p>          </div><p>后门攻击希望达到的目的是在攻击者不进行操作的时候，普通用户可以正常使用分类器，即在大多数情况下分类器分类结果可靠，只有在特殊区域的样本会被错误分类，这使防御方也很难察觉这种攻击。<br><img src="/images/20201008-2/4.webp" alt="后门攻击"></p><h1 id="3-防御方案"><a href="#3-防御方案" class="headerlink" title="3 防御方案"></a>3 防御方案</h1><p>数据投毒问题可以说是关于“如何在噪音的环境中学习模型”问题的延伸，对于数据投毒还没有一个比较完善的防御方案。一般通过均匀采样、构建标准数据集以及集成学习来缓解攻击问题。</p><div class="note success">            <p>均匀采样</p>          </div><p>数据分布不均匀是导致数据投毒的根本原因，如果可以在训练模型时保证各类样本均匀分布，就可以从根本上杜绝这种攻击。但在真实的生产网络中实现均匀采样是难以实现的。</p><div class="note success">            <p>构建标准数据集</p>          </div><p>数据投毒一般用于攻击在线学习系统，如果我们构建一个样本集，在每次更新模型后，模型必须通过样本集的“考核”，即需要能以较高准确率分类标准数据集中的样本这次更新才会执行，确保模型不会因为一次集中的数据投毒而大幅改变分类边界。</p><div class="note success">            <p>集成学习技术</p>          </div><p>集成学习指同时训练多个机器学习模型，在识别待测样本时综合每个模型的的分类结果，给出最终分类判断。这种方式可以在一定程度上抵御数据投毒攻击。</p>]]></content>
    
    
    <summary type="html">数据投毒（Data Poisoning Attacks）指通过污染训练样本达到改变分类器边界的目的，数据投毒一般发生在线学习系统中。本文首先简要介绍了数据投毒技术，并分析了真实世界中的数据投毒攻击案例。然后详细说明了反馈化武器（feedback weaponization）、模型偏斜（model skewing）以及后门攻击（back door attacks）三种攻击方式的原理。最后简要分析了三种目前较为有效的模型窃取技术。</summary>
    
    
    
    <category term="科研总结" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://liuguangrui.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="https://liuguangrui.top/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="数据投毒" scheme="https://liuguangrui.top/tags/%E6%95%B0%E6%8D%AE%E6%8A%95%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——对抗攻击</title>
    <link href="https://liuguangrui.top/archives/929f209b.html"/>
    <id>https://liuguangrui.top/archives/929f209b.html</id>
    <published>2020-10-08T04:46:38.000Z</published>
    <updated>2020-10-10T14:54:34.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1 技术简介"></a>1 技术简介</h1><p>对抗攻击指通过特殊构造的输入使分类器结果不可靠。比如在一个交通路牌上贴一些黑白色块贴纸就可以让自动驾驶系统将其误判为绿灯标志。<br><img src="/images/20201008-1/1.webp" alt="对路牌做微小扰动就可以令自动驾驶系统将其误判为其它标志"><br>目前对于对抗样本产生的原因尚未有统一定论，<a href="https://arxiv.org/abs/1412.6572">Goodfellow 提出一种猜测</a>称深度神经网络在高维空间中的线性特征是产生对抗样本的根本原因。每层神经元的输出$ a=g(wx+b) $,实际上是在空间中的旋转、移动和拉伸。</p><span class="label primary">旋转</span>：使用权重$ w $进行线性变换；<br><br><span class="label primary">移动</span>：使用偏置$ b $进行平移；<br><br><span class="label primary">拉伸</span>：使用激活函数$ g $进行非线性变化。<br><br><p>对于简单的分类问题，在二维平面被拉伸可成可以通过直完成分割的分类布局，对于更复杂的问题，通过增加神经元，在高维空间进行分离。总之神经网络学习到的并非人类认知的底层逻辑，而仅仅是在高维空间中，通过一切扭曲变换使得样本可以被线性分割。<br><img src="/images/20201008-1/2.webp" alt="深度神经网络在高位空间的线性化是对抗样本的成因"><br>在如图的拉伸结果中，距离较大的地方可以认为其映射是连续的，但缠绕在一起的部分超平面已经无法连续。对抗样本正是在这类区域增加扰动，扰动虽然极其微小但对于分类器来说，样本早已跨越了分类界限。我们可以简单理解为在分类器边界对样本做一个微小的扰动，以改变样本类别。<br><img src="/images/20201008-1/3.webp" alt="边界样本更容易被对抗攻击"><br>用数学语言来理解，在训练分类器时，我们固定输入 $ x $ 和真实类别 $ y $，调整参数 $ \theta $ 使损失函数最小化，尽量缩小判别类别 $ f(x) $ 与真实类别 $ y $ 的距离。而在攻击一个已经训练好的分类器时，即分类器参数 $ \theta $ 确定，在保证真实类别 $ y $ 不变的条件下，调整 $ x $ 使得损失函数最大，即尽量拉大判别类别 $ f(x) $ 与真实类别 $ y $ 的距离，使分类器判别错误。那么如何能最大化损失函数呢？就是在损失函数于样本的梯度方向增加一个步长的扰动，此扰动要在足够微小以避免改变真实类别 $ y $ ，满足 $ L_{\infty} $约束$ ||x^*-x||_{\infty}\leq\epsilon  $ 以最小的步长达到分类器边界。则最终得到的对抗样本 $ x^* $ 为：</p><p>\[ x^*=x+\epsilon\cdot sign(\bigtriangledown_{x}J(\theta,x,y)) \]<br>其中 $ sign() $ 是符号函数，括号里面是损失函数对 $ x $ 的偏导，$ x $ 是输入的原始图片，$ x^* $ 是生成的对抗样本，$ J $ 是分类器的损失函数，$ y $ 是输入图片x的标签（真实类别）。<br><img src="/images/20201008-1/4.webp" alt="最大化损失函数以寻找对抗样本"></p><h1 id="2-攻击方案"><a href="#2-攻击方案" class="headerlink" title="2 攻击方案"></a>2 攻击方案</h1><p>已发现的对抗攻击技术可以分为用于白盒的梯度攻击和用于黑盒的优化攻击，根据攻击目的也可以分为置信度降低攻击、无目标攻击和有目标攻击。</p><div class="note danger">            <p>基于梯度的对抗攻击</p>          </div><p>如上所述，在白盒条件下，计算损失函数梯度并在此方向向样本中加入微量扰动。</p><div class="note danger">            <p>基于优化的对抗攻击</p>          </div><p>多用于黑盒环境，由于不知道模型参数所以无法计算梯度，退一步考虑怎样才能找到最小的扰动方式。比如使用GAN（生成对抗网络）使对抗样本分布向目标类别样本分布拟合，或者使用最优化算法在空间中寻找最优的扰动解集。</p><div class="note danger">            <p>置信度降低攻击</p>          </div><p>攻击者目标为使分类器对于某样本的置信度降低。比如从99%是A类降低到55%是A类。</p><div class="note danger">            <p>无目标攻击</p>          </div><p>攻击者目的为使分类器对于某样本的判别出现错误，但不关心错误分类与哪一类。比如使某原属于A类的样本被分类器分类与非A类。</p><div class="note danger">            <p>有目标攻击</p>          </div><p>攻击者目的为使分类器对于某样本的判别出现错误，且指定其错误分类于某类。比如使某原属于A类的样本被分类于B类。</p><h1 id="3-防御方案"><a href="#3-防御方案" class="headerlink" title="3 防御方案"></a>3 防御方案</h1><p>现有的防御手段有对抗训练、梯度隐藏、随机化以及去噪。</p><div class="note success">            <p>对抗训练技术</p>          </div><p>对已经训练完成的分类器计算生成对抗样本，并将对抗样本集加入模型训练集中，进一步加强训练分类器。此方案虽然可以抵御部分对抗样本，但并不能从根本上解决对抗攻击问题。对抗训练后的模型依旧可以找到可以攻击成功的对抗样本，并且不断的对抗训练会使分类边界不断扩大。</p><div class="note success">            <p>梯度隐藏</p>          </div><p>隐藏分类器返回的置信度信息，由于白盒对抗攻击通常使用分类器返回的置信度来调整扰动，辅助产生对抗样本。隐藏模型梯度可以增加攻击者难度。</p><div class="note success">            <p>模型随机化</p>          </div><p>本方案主要防御基于梯度的对抗攻击，将模型的输入进行随机化处理。比如对于图像识别分类器，每次给图片样本加一个宽度随机的边框，由于在模型训练时也进行这种处理，模型在分类时可以识别任意宽度边框的样本，但对于梯度攻击，不同宽度的边框会计算出完全不同的梯度，由于边框宽度是随机变化的，使得攻击者无法确定梯度方向。</p><div class="note success">            <p>样本去噪</p>          </div><p>此方案很直接，因为对抗模型实在原始样本中添加微小噪音扰动。那么为了防御这种攻击，在模型分类时，先对模型的输入进行去噪处理，去除攻击者为制造对抗样本而增加的噪音。然而目前并没有很完善的针对对抗攻击的去噪技术，一些去噪甚至会起到相反效果，使对抗攻击样本被误分类的置信度更高。</p>]]></content>
    
    
    <summary type="html">对抗攻击（Adversarial Attacks）指通过特殊构造的输入使分类器结果不可靠。本文首先简要介绍了对抗攻击技术以及其产生的原因。然后从白盒攻击与黑盒攻击两个角度进行了攻击面的分析。最后介绍了现有的一些防御与缓解攻击的方案。</summary>
    
    
    
    <category term="科研总结" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://liuguangrui.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="https://liuguangrui.top/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="对抗攻击" scheme="https://liuguangrui.top/tags/%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——背景介绍</title>
    <link href="https://liuguangrui.top/archives/b967121.html"/>
    <id>https://liuguangrui.top/archives/b967121.html</id>
    <published>2020-10-08T03:14:37.000Z</published>
    <updated>2020-10-10T15:01:45.049Z</updated>
    
    <content type="html"><![CDATA[<p>本编文章为笔者研究方向“面向网络流量的人工智能内生安全保护”的提纲。如今人工智能在各种传统分类识别问题上显示出强大能力。但由于其算法缺乏可解释性，人工智能系统在数据、算法、模型等多方面存在脆弱点。目前多数机器学习方法都假设其环境是良性的，但这种假设并不总是成立。本片文章将从信息安全三要素（完整性、可用性、机密性）角度分析现有人工智能系统存在的内生安全问题。</p><h1 id="1-工业界应用现状"><a href="#1-工业界应用现状" class="headerlink" title="1 工业界应用现状"></a>1 工业界应用现状</h1><p>人工智能内生安全指的是人工智能系统自身存在的脆弱性。如今越来越多的系统引入AI技术，它的确在传统分类识别问题上显示出强大的能力。但是由于其系统缺乏可解释性，AI在数据、算法、模型等多方面都存在脆弱点。目前工业界对其脆弱性的重视程度和对AI系统的保护远远不够。<br><img src="/images/20201008-1/1.webp" alt="在熊猫照片上加入微量噪音就能严重影响分类器性能"><br>在ICLR2015会议上Goodfellow展示了向熊猫图片中加入肉眼难以发现的微量干扰，，就可以严重影响分类器识别性能，将其识别为猿猴。这种技术如果用在攻击入侵检测系统或自动驾驶系统，将会带来灾难性的后果。<br><img src="/images/20201008-1/2.webp" alt="Google 垃圾邮件识别系统受到数据投毒攻击"><br>谷歌公司也曾多次受到针对其人工智能垃圾邮件识别系统的攻击，导致公司必须重新训练邮件分类器。谷歌垃圾邮件分类器使用在线学习技术，攻击者将大量垃圾邮件反馈为非垃圾邮件以达到干扰分类器性能的目的。图片中横轴为时间，纵轴为邮件数量，绿线表示用户手动标记为垃圾邮件，红线表示用户手动标记为非垃圾邮件。由于将标签决定权交给用户，而又没有有效的保护措施，导致了这次数据投毒攻击。<br>对人工智能系统的攻击测试与防御加固会受到越来越多的关注。目前已发现多种破坏机器学习模型的攻击手段，诸如对抗攻击、数据投毒、模型窃取等。而在网络入侵检测系统上的有效防御研究还远远不足。这给面向网络流量的人工智能内生安全保护带来了新的挑战。</p><h1 id="2-学术界研究现状"><a href="#2-学术界研究现状" class="headerlink" title="2 学术界研究现状"></a>2 学术界研究现状</h1><p>使用Web of Science统计关于人工智能内生安全的研究发现近几年研究人员在这方面的兴趣快速增长.<br><img src="/images/20201008-1/3.webp" alt="人工智能内生安全近年论文发表数量"><br><img src="/images/20201008-1/4.webp" alt="人工智能内生安全近年论文应用领域"><br>但是在入侵检测系统上的工作较少。从信息安全三要素角度考虑，破坏人工智能完整性的主要问题有对抗攻击和数据投毒；破坏人工智能系统可用性的主要从模型代码漏洞角度入手；破坏人工智能系统机密性的主要问题为模型窃取。<br><img src="/images/20201008-1/5.webp" alt="人工智能内生安全研究内容"><br>由于模型漏洞和具体代码实现有关，我们的研究主要从对抗攻击、数据投毒与模型窃取三个方面进行。您可以在以下的三篇文章中详细了解人针对工智能内生安全的主要攻击手段与目前提出的有效防御方案。</p><ul><li><a href="/archives/b967121.html" title="人工智能内生安全——对抗攻击">人工智能内生安全——对抗攻击</a></li><li><a href="/archives/b967121.html" title="人工智能内生安全——数据投毒">人工智能内生安全——数据投毒</a></li><li><a href="/archives/b967121.html" title="人工智能内生安全——模型窃取">人工智能内生安全——模型窃取</a></li></ul><h1 id="3-推荐书目"><a href="#3-推荐书目" class="headerlink" title="3 推荐书目"></a>3 推荐书目</h1><p>最后推荐四本与人工智能内生安全相关的书籍。<br><img src="/images/20201008-1/6.webp" alt="人工智能安全推荐书目"><br>《人工智能安全》是方滨兴院士主编，在2020年6月份出版的书，内容很前沿甚至有些科幻。本书追求广度而非深度，适合作为入门书籍寻找兴趣点；<br>《Adversarial Machine Learning》是一本理论性很强的关于机器学习对抗攻击的书，其从拓扑学角度解释了机器学习算法内核以及对抗攻击产生的原理；<br>《Interpretable Machine Learning》是一本工程性很强的关于可解释机器学习的书，此书完整<a href="https://christophm.github.io/interpretable-ml-book">电子版</a>免费阅读，并有对应的<a href="https://github.com/christophM/interpretable-ml-book">GitHub开源项目</a>；<br>《Attacking Artificial Intelligence》是2019年哈佛大学的一份调查报告，其统计了学术界和工业界在人工智能安全方面的进展以及各国政府出台的关于AI安全的政策与法律，本书主要侧重于网络安全领域。</p>]]></content>
    
    
    <summary type="html">人工智能内生安全指的是人工智能系统自身存在的脆弱性。如今越来越多的系统引入AI技术，它的确在传统分类识别问题上显示出强大的能力。但是由于其系统缺乏可解释性，AI在数据、算法、模型等多方面都存在脆弱点。目前工业界对其脆弱性的重视程度和对AI系统的保护远远不够。</summary>
    
    
    
    <category term="科研总结" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://liuguangrui.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="https://liuguangrui.top/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客教程</title>
    <link href="https://liuguangrui.top/archives/1085c2b.html"/>
    <id>https://liuguangrui.top/archives/1085c2b.html</id>
    <published>2020-10-06T14:33:01.000Z</published>
    <updated>2020-10-10T15:23:01.854Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h1><h2 id="1-1-注册-GitHub-账号"><a href="#1-1-注册-GitHub-账号" class="headerlink" title="1.1 注册 GitHub 账号"></a>1.1 注册 GitHub 账号</h2><p>访问 <a href="https://github.com/">GitHub</a> 官网注册 GitHub 账号并进行邮箱验证。<br><img src="/images/20201006-1/1.webp" alt="图 1"></p><h2 id="1-2-安装-Node-js-和-nmp"><a href="#1-2-安装-Node-js-和-nmp" class="headerlink" title="1.2 安装 Node.js 和 nmp"></a>1.2 安装 Node.js 和 nmp</h2><p>访问 <a href="https://nodejs.org/">Node.js</a> 官网安装 Node.js，nmp 是随同 Node.js 一起安装的包管理工具。<br><img src="/images/20201006-1/2.webp" alt="图 2"></p><h2 id="1-3-安装-Git-for-Windows"><a href="#1-3-安装-Git-for-Windows" class="headerlink" title="1.3 安装 Git for Windows"></a>1.3 安装 Git for Windows</h2><p>访问 <a href="https://gitforwindows.org/">Git</a> 官网安装 Git for Windows。<br><img src="/images/20201006-1/3.webp" alt="图 3"></p><h1 id="2-搭建-GitHub-博客"><a href="#2-搭建-GitHub-博客" class="headerlink" title="2 搭建 GitHub 博客"></a>2 搭建 GitHub 博客</h1><h2 id="2-1-创建-GitHub-仓库"><a href="#2-1-创建-GitHub-仓库" class="headerlink" title="2.1 创建 GitHub 仓库"></a>2.1 创建 GitHub 仓库</h2><p>新建一个 Repositories, 存放博客项目文件。<br><img src="/images/20201006-1/4.webp" alt="图 4"><br>新建一个名为“<span class="label warning">你的用户名.github.io</span>”的仓库。如果你的GIthub用户名是 <span class="label warning">test</span>，那么就新建 <span class="label warning">test.github.io</span>的仓库（必须是你的用户名，其它名称无效），由此可见，每一个 GitHub 账户最多只能创建一个这样可以直接使用域名访问的仓库。<br><img src="/images/20201006-1/5.webp" alt="图 5"><br>跳转到该库界面，选择 Settings。<br><img src="/images/20201006-1/6.webp" alt="图 6"><br>进入 Settings 后，下拉找到 GitHub pages 设置界面，点击 Choose a theme。<br><img src="/images/20201006-1/7.webp" alt="图 7"><br>选择一个博客主题，然后点击 Select theme。<br><img src="/images/20201006-1/8.webp" alt="图片 8"><br>到这一步就已经可以访问自己的博客了。在地址栏输入：<span class="label warning">用户名.github.io</span> 就可以访问页面了。<br><img src="/images/20201006-1/9.webp" alt="图 9"></p><h2 id="2-2-配置-SSH-Key"><a href="#2-2-配置-SSH-Key" class="headerlink" title="2.2 配置 SSH Key"></a>2.2 配置 SSH Key</h2><p>在 Windows 菜单里搜索启动 Git Bash，设置 user.name 和 user.email 的配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的 GitHub 用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的 GitHub 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>生产SSH秘钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的 GitHub 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。<br>找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，用记事本打开并复制里面的内容。<br><img src="/images/20201006-1/10.webp" alt="图 10"><br>打开GitHub主页，进入个人设置 –&gt; SSH and GPG keys –&gt; New SSH key：<br>新建 New SSH key，将复制的内容粘贴到key中，title随便填，保存。<br><img src="/images/20201006-1/11.webp" alt="图 11"><br>启动 Git Bash 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connnecting (yes/no)?</span><br></pre></td></tr></table></figure><p>输入 <span class="label default">yes</span>，然后会看到：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>看到这个信息说明 SSH 已配置成功！</p><h1 id="3-使用Hexo写博客"><a href="#3-使用Hexo写博客" class="headerlink" title="3 使用Hexo写博客"></a>3 使用Hexo写博客</h1><h2 id="3-1-安装Hexo"><a href="#3-1-安装Hexo" class="headerlink" title="3.1 安装Hexo"></a>3.1 安装Hexo</h2><p>在自己认为合适的地方创建博客文件夹，然后在该目录下右键点击 Git Bash Here，打开 Git 的控制台窗口，之后的所有操作都在 Git 控制台中进行，不要再使用 Windows 的控制台了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo <span class="comment"># 安装Hexo</span></span><br></pre></td></tr></table></figure><h2 id="3-2-初始化Hexo"><a href="#3-2-初始化Hexo" class="headerlink" title="3.2 初始化Hexo"></a>3.2 初始化Hexo</h2><p>仍在该目录下右键 Git Bash Here，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>输入以上命令后，hexo 会自动下载一些文件到这个目录，包括 node_modules，其中比较重要的几个文件的目录结构如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 开启本地预览服务</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 public 文件夹生成相关 html 文件，这些文件将来都会提交到 GitHub 中。<br>打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到博客内容，第一次初始化时Hexo已经自动生成了一篇名为 Hello World 的文章。<br><img src="/images/20201006-1/12.webp" alt="图 12"></p><h2 id="3-3-配置-Hexo"><a href="#3-3-配置-Hexo" class="headerlink" title="3.3 配置 Hexo"></a>3.3 配置 Hexo</h2><p>在 Hexo 中有两种主要配置文件，其名称都是 _config.yml。其中，一种位于站点根目录下，主要包含 Hexo 本身的配置；另一种位于主题目录下，这种配置文件由主题坐着提供，主要用于配置主题相关选项。为了描述方便，在以下说明中，将前者称为<span class="label info">站点配置文件</span>，后者称为<span class="label primary">主题配置文件</span>。<br>修改<span class="label info">站点配置文件</span>中有关 deploy 的部分，注意将 username 修改为你的 GitHub 用户名：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>并安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>打开 Git Bash，输入 <span class="label danger">hexo d</span> 就会将本次所有改动的代码全部提交，没有改动的不会提交。<br>此时访问博客地址就和本地预览服务一样了。<br><img src="/images/20201006-1/13.webp" alt="图 13"></p><h2 id="3-4-写第一篇博文"><a href="#3-4-写第一篇博文" class="headerlink" title="3.4 写第一篇博文"></a>3.4 写第一篇博文</h2><p>定位到 Hexo 根目录，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;my-first-blog&#x27;</span></span><br></pre></td></tr></table></figure><p>Hexo 会在 _posts 下生成相关 md 文件。我们只需打开这个文件就可以编写博客了，一般完整格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，但可以修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空缺</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><p>#4 美化主题</p><h2 id="4-1-下载-Next-主题"><a href="#4-1-下载-Next-主题" class="headerlink" title="4.1 下载 Next 主题"></a>4.1 下载 Next 主题</h2><p>以 Next 主题为例，如果你熟悉 Git，建议使用克隆最新版本的方式，之后的更新可以通过 <span class="label danger">git pull</span> 来快速更新，而不用再下载压缩包替换。<br>使用 Git Bash 定位到 Hexo 站点目录下。使用 Git checkout 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h2 id="4-2-启用主题"><a href="#4-2-启用主题" class="headerlink" title="4.2 启用主题"></a>4.2 启用主题</h2><p>打开<span class="label info">站点配置文件</span>，找到 theme 字段，并将其值改为 next。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>至此，Next 主题安装完成。下一步我们验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <span class="label danger">hexo clean</span> 命令来清除 Hexo 缓存。然后输入命令 <span class="label danger">hexo d</span> 开启本地预览服务，当命令行输出中提示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，检查站点是否正确运行。<br>当你看到站点的外观与下图所示类似时，说明已经成功安装 Next 主题。这是 Next 默认的 Scheme–Muse。<br><img src="/images/20201006-1/14.webp" alt="图 14"><br>执行 <span class="label danger">hexo d</span> 提交代码。终于，我们的博客已经搭建完毕，后续可以进一步美化博客主题，并不断充实博客内容。您可以通过以下连个网址查询具体的网站与主题配置以进一步完善您的网站。</p><ul><li><a href="https://hexo.io/">Hexo框架官方文档</a></li><li><a href="http://theme-next.iissnan.com/">Next主题官方文档</a><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>开始耕耘你的网上花园吧！</p>            <i class="fa fa-quote-right"></i>          </blockquote></li></ul>]]></content>
    
    
    <summary type="html">Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</summary>
    
    
    
    <category term="科研总结" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="https://liuguangrui.top/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://liuguangrui.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="https://liuguangrui.top/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
