<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘广睿的思维实验室</title>
  
  <subtitle>理论都是灰色的 唯有生命之树长青</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-09T12:41:29.861Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>刘广睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《卡拉马佐夫兄弟》读书笔记</title>
    <link href="http://example.com/2020/10/09/20201009/"/>
    <id>http://example.com/2020/10/09/20201009/</id>
    <published>2020-10-09T02:11:33.000Z</published>
    <updated>2020-10-09T12:41:29.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-故事梗概"><a href="#1-故事梗概" class="headerlink" title="1 故事梗概"></a>1 故事梗概</h1><h1 id="2-人物介绍"><a href="#2-人物介绍" class="headerlink" title="2 人物介绍"></a>2 人物介绍</h1><h1 id="3-精彩桥段"><a href="#3-精彩桥段" class="headerlink" title="3 精彩桥段"></a>3 精彩桥段</h1><p>4<br>卡拉马佐夫兄弟是我在读</p><p>宗教大法官<br>长老的葬礼<br>伊万的梦魇<br>律师的演说</p><p>一旦您恐慌的发现，尽管您做了一切努力，您非但没有向目标靠近，反而像是离得更远了，——恰恰在那个时刻，我可以向您预言，您将一下子达到目的地</p><p>一粒麦子落在地里若不死，仍是一粒；若是死了，就会结出许多粒来</p><p>越是愚蠢，就越切题。越是愚蠢，就越明白。愚蠢是简单朴素的，而智慧是拐弯抹角、躲躲藏藏的。智慧是卑劣的，而愚蠢是直率和诚实的。</p><p>知道吗，世上太需要荒唐了。这世界就是靠荒唐支撑起来的，要是没有荒唐，世界只是一潭死水。</p><p>对于人和人类社会来说，从来没有任何东西比自由更无法忍受的了！</p><p>对人来说，安宁甚至死亡比在认识善与恶方面的自由选择更可贵。最能吸引人的莫过于让他的良心得到自由，但最折磨人的也莫过于此。</p><p>整个世界早已走上另一条道路，我们把十足的谎言当做真理，还要求别人也说谎。</p><p>国家的口号是和谐稳定，国家的美德是热爱劳动。在这个国家主义的美丽新世界，人类只具有身体上的意义，身体之外的思想、感情、意志都被彻底铲除。毫无疑问，这是一个完美的公司化的国家，却是人类的地狱</p><p>有一种东西叫做自由主义：不称职的自由，受苦的自由，不合时宜的自由。 有一种东西叫做民主。好像人和人之间除了物理和化学性能平等之外还有什么别的东西也会平等似的。</p><p>他们会思考，这是对社会稳定的潜在威胁。</p><p>真理被淹没在无聊琐碎的世事中，人们在汪洋如海的信息中日益变得被动和自私，文化成为充满感官刺激、欲望和无规则游戏的庸俗化，我们将毁于我们热爱的东西。</p><p>如今人人都力图最大限度地各自为政，都想在自我封闭的状态中追求生活的完满，其实他们的一切努力并不能得到生活完满的结果，只能是彻底的自我毁灭，因为充分确立自我非但没有成功，反而陷入十足的自闭。</p><p>要知道，最崇高的精神力量，在今后的生活中对身心最有益的感受，莫过于某种美好的回忆，尤其是童年时代从故乡故居保留下来的回忆。……而某一段从童年时代保留下来的美好而神圣的回忆或许正是最好的教育。</p><p>理智认为是耻辱的，感情偏偏当做绝对的美。</p><p>如果没有人造出上帝来，也就根本没有文明。</p><p>十八世纪有个年老的罪人说过，如果上帝不存在，必须把他造出来，如果上帝不存在，必须把他造出来。人果然造出了上帝。奇怪的并不是上帝确实存在，这一点并不神妙，神妙的是这一思想——上帝必不可少这一思想——居然会钻到人这样一种野蛮而凶恶的动物头脑中去，因为这个思想是在太神圣、太感人、太英明了，它给人类增添了太多的光彩。至于我，我早已拿定注意不去考虑：是人创造了上帝，还是上帝创造了人？</p><p>“我想，如果世上不存在魔鬼，那么是人创造了魔鬼，是人按照自己的模样造出了魔鬼。”</p><p>“就是说，跟上帝一样。”</p><p>人一旦否定了奇迹，也就否定了上帝，因为人寻找的与其说是上帝，毋宁说是奇迹。</p><p>没有批评岂不是一篇歌功颂德声？但生活不能光唱赞美诗，必须让赞美经过怀疑的熔炉接受试炼。</p><p>“良心！良心算什么？我自己就会做良心。我为什么苦恼？就是习惯。那是七千年形成的全世界人类的习惯。将来戒掉了这种习惯，咱们就成了神。”</p><p>在现实主义者身上，并不是奇迹产生信仰，而是信仰产生奇迹。</p><p>在大多数情况下，人们，甚至恶人，要比我们想象中的他们幼稚得多、天真得多。其实我们自己也一样。</p><p>上帝与魔鬼在哪里搏斗，战场便在人们的心中。</p><p>阿廖沙感叹道。”我认为，在世上人人都应该首先爱生活。“ ”爱生活胜于爱生活的意义？“ ”一定得这样，像你所说的超越逻辑去爱，一定得超越逻辑，那时我才理解其涵义。”</p><p>谁掌握着人们的良心和面包，就该由谁来统治他们</p><p>建塔的目的并不是为了从地上登天，而是把天挪到地上来。</p><p>“当然，他们有苦难，但是……他们毕竟活着，活得实在，并不虚幻；因为苦难就是生活。没有苦难，生活还有什么乐趣……岂不成了一场没完没了的教堂礼拜？尽管很神圣，可也太乏味了。</p><p>正常的父子关系，不是仅靠神秘主义的偏见维系，而是建立在理智，清醒和严格合乎人道的基础之上。</p><p>要爱一个人，那个人必须隐藏起来，只要一露面，爱就消失了。</p><p>他说，我爱人类，但是自己觉得奇怪的是我对全人类爱得越深，对单独的人，也就是对一个个个别的人就爱得越少。他说，我在幻想中屡次产生为人类服务的热望，也许真的会为了人类走上十字架，如果忽然有这个需要的话，然而经验证明，我不能同任何一个人在一间屋里住上两天。他刚刚和我接近一点，他的个性就立刻妨碍我的自爱，束缚我的自由。我会在一昼夜之间恨起最好的人来：恨这人，为了吃饭太慢，恨那人，为了他伤风，不断地撸鼻涕。他说，只要人们稍微碰我一下，我就会成为他们的仇敌。然而事情常常是我对于个别的人越恨得深，那么我的对于整个人类的爱就越见炽烈。</p><p>他已经多少有了我们这个时代的青年人的气质：本性诚实，渴望真理，寻求它，又信仰它，一旦信仰了以后就全心全意献身于它，要求迅速建立功绩，抱着为此甘愿牺牲一切甚至性命的坚定不移的决心。然而，不幸这些青年人往往不明白在许多类事情上牺牲性命也许只是一切牺牲中最容易的一种；譬如说，从青春洋溢的生命中，牺牲五六年光阴去从事艰难困苦的学习、钻研科学，哪怕只是为了增强自身的力量，以便服务于自己所爱的真理，和甘愿完成的苦行——这样的牺牲就有许多人办不到。阿辽沙虽选择了和大家完全相反的道理，但仍带着同样的渴求、迅速立功的心情。他刚刚经过严肃的思索后，突然对灵魂不死和上帝的存在产生了确信，就立刻毫无做作地对自己说:”我甘愿为探寻灵魂不死而生活，决不半心半意。”</p><p>即使我看不见太阳，我也知道太阳存在着。知道太阳存在，就已经是全部生活。</p>]]></content>
    
    
    <summary type="html">1231231312</summary>
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="陀思妥耶夫斯基" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%99%80%E6%80%9D%E5%A6%A5%E8%80%B6%E5%A4%AB%E6%96%AF%E5%9F%BA/"/>
    
    
    <category term="俄罗斯文学" scheme="http://example.com/tags/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%87%E5%AD%A6/"/>
    
    <category term="陀思妥耶夫斯基" scheme="http://example.com/tags/%E9%99%80%E6%80%9D%E5%A6%A5%E8%80%B6%E5%A4%AB%E6%96%AF%E5%9F%BA/"/>
    
    <category term="卡拉马佐夫兄弟" scheme="http://example.com/tags/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——模型窃取</title>
    <link href="http://example.com/2020/10/08/20201008-3/"/>
    <id>http://example.com/2020/10/08/20201008-3/</id>
    <published>2020-10-08T11:27:30.000Z</published>
    <updated>2020-10-08T14:57:55.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1 技术简介"></a>1 技术简介</h1><p>模型窃取指通过黑盒探测来窃取模型甚至恢复模型的训练样本数据。如今我们进入到了一个机器学习即服务（Mlaas）的时代，很多公司训练机器学习模型分类器并向用户付费提供接口来获取利润。公司不希望自己消耗大量资源训练的分类器可以被竞争对手轻松复制，如何保护机器学习模型本身不被复制与窃取逐渐成为工业界重要需求之一。另外模型窃取攻击直接对用户隐私造成威胁,攻击者只需要拖过一个人的姓名，就可以通过不断在黑盒模型中不断测试输入输出，最终从噪音文件逐渐逆向出个人照片。<br><img src="/images/20201008-3/1.webp" alt="利用模型逆向通过姓名获取照片"><br>机器学习分类器被发现存在可移植，如果两个模型的功能相似，即便它们们使用的机器学习算法不同，同一对抗样本也可能对他们都有攻击效果，右图为模型可移植性比较。即如果模型A为SVM（支持向量机）而模型B为DNN（深度神经网络），它们使用同一训练样本集学习，理论上由于内部算法不同，其分类面结构应该大相径庭，然而实现发现在模型A上计算生成的对抗样本有64.34%的概率在模型B中也能产生对抗效应，这使得防御模型窃取成为抵御对抗攻击的重要前提。<br><img src="/images/20201008-3/2.webp" alt="机器学习可移植性比较"></p><h1 id="2-攻击方案"><a href="#2-攻击方案" class="headerlink" title="2 攻击方案"></a>2 攻击方案</h1><p>已发现的模型窃取技术可以总结为模型萃取、成员推断和模型逆向。</p><div class="note danger">            <p>模型萃取攻击</p>          </div><p>模型萃取攻击指攻击者通过大量记录对一个黑盒机器学习模型的输入输出测试，将其作为自己模型的输入输出进行训练，使自己的模型越来越逼近目标模型，以达到复制并窃取模型的目的。攻击者首先模糊测试目标分类器的分类算法并大致拟合模型分布，形成一个影子模型（shadow model）。然后分析影子模型各类别边界并在边界采样，形成边界样本集。最后将边界样本集分别输入影子模型和目标模型，对于分类结果不同的样本，将其标签设置为目标分类器结果并加入到作为影子模型的训练样本中。循环此过程是影子模型最终无限接近目标模型。</p><div class="note danger">            <p>成员推断攻击</p>          </div><p>成员推断攻击指攻击者希望分析某样本是否在模型的初始训练集中。可以执行这种攻击的依据是模型对于待识别样本在其初始训练集中这个条件的真与假会表现与其分类过程与结果中。比如置信度、准确率甚至判别速度、模型耗能等因素会因待识别样本是否在训练集中而有不同，手机这些信息并对其进行建模。最终可以得到一个判断样本是否在模型训练样本中的二元分类器。</p><div class="note danger">            <p>模型逆向攻击</p>          </div><p>模型逆向指攻击者可以通过模型的输出逆向出模型的出入。对于人脸识别系统，攻击者可以通过个人信息如姓名逐渐从噪音文件逆向出个人照片。一般攻击者对攻击目标有一个模糊的范围，通过不断测试模型的输入输出，可以逐渐缩小范围以锁定目标文件。</p><h1 id="3-防御方案"><a href="#3-防御方案" class="headerlink" title="3 防御方案"></a>3 防御方案</h1><p>目前比较有效的防御方案是模型水印和联邦学习。</p><div class="note success">            <p>模型水印技术</p>          </div><p>模型水印主要防御模型窃取攻击。模型水印可以理解为模型制作者在模型中留下一个后门，在使用这个模型前必须通过这个后门，模型才可以正确运行。由于模型萃取技术很难将分类器细节还原，对于后门信息攻击者无法有效萃取。</p><div class="note success">            <p>联邦学习技术</p>          </div><p>联邦学习主要防御成员推断与模型逆向攻击。联邦学习指的是每个用户使用自己的模型训练自己的数据集，最后统一调和所有用户的模型参数，得到一个最终模型。由于最红模型的输入不是用户的初始数据，攻击者逆向出原始训练数据的难度很大。</p>]]></content>
    
    
    <summary type="html">模型窃取（Model Stealing）指通过黑盒探测来窃取模型甚至恢复模型的训练样本数据。本文首先简要介绍了模型窃取攻击技术，并分析了其对用户的危害以及企业界的需求。然后详细讲解了模型萃取、成员推断与模型逆向三种攻击的具体实现。最后介绍了两种较为有效的防御手段。</summary>
    
    
    
    <category term="科研总结" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="模型窃取" scheme="http://example.com/tags/%E6%A8%A1%E5%9E%8B%E7%AA%83%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——数据投毒</title>
    <link href="http://example.com/2020/10/08/20201008-2/"/>
    <id>http://example.com/2020/10/08/20201008-2/</id>
    <published>2020-10-08T11:27:28.000Z</published>
    <updated>2020-10-08T15:09:04.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1 技术简介"></a>1 技术简介</h1><p>数据投毒指通过污染训练样本达到改变分类器边界的目的。数据投毒一般发生在在线学习系统中。阿里巴巴在2019年公司安全报告上称他们收到了一种模型偏斜的数据投毒攻击，在最开始阿里巴巴安全部报告称他们持续的接收到某种低级的攻击流量，这种流量可以轻易地被阿里入侵检测系统拦截。令人不解的是攻击者明知道这种攻击会被拦截，并不能达到攻击效果，但是他们依然不停的发送这种低级的攻击流量。最后阿里安全部门才发现攻击者前后发送了两轮攻击流量，第一批低级攻击流量的目的不是为了进入公司内网，而仅仅是为了干扰入侵检测系统，发送集中于模型边界的大量恶意样本，使模型黑白样本分布不均匀，致使推动模型边界，使模型偏斜。而第二轮攻击流量是一批对抗攻击流量，原本就在模型边界的对抗样本，在模型偏斜之后，更容易的绕过了入侵检测系统的过滤。<br><img src="/images/20201008-2/1.webp" alt="Google 垃圾邮件识别系统受到数据投毒攻击"></p><h1 id="2-攻击方案"><a href="#2-攻击方案" class="headerlink" title="2 攻击方案"></a>2 攻击方案</h1><p>已发现的数据投毒技术有反馈化武器，模型偏斜和后门攻击。为便于理解，每种攻击方式使用简易图示辅助介绍：图中橙色线表示原始分类边界，紫色线表示被篡改后的分类边界。蓝色叉号表示恶意样本，绿色圆形代表白样本，红色边缘的样本为攻击者构造的样本。骷髅表示被攻击者利用的区域。</p><div class="note danger">            <p>反馈化武器</p>          </div><p>一般用于将样本标签决定权交给用户的机器学习模型。由于攻击者可以有意的将样本标记为错误的分类器，这种模型如果没有有效的保护手段，很容易受到攻击。分类边界会被不断拉偏最终导致整个模型分类结果不可靠。<br><img src="/images/20201008-2/2.webp" alt="反馈化武器"></p><div class="note danger">            <p>模型偏斜攻击</p>          </div><p>如上所述，攻击者通过集中投放位于模型边界的样本，使模型样本分布不均匀，模型为了寻找最优分割面，会改动其分类边界，使攻击者可以利用分类界面附近的危险区域。其一般伴随对抗攻击同时出现。<br><img src="/images/20201008-2/3.webp" alt="模型偏斜"></p><div class="note danger">            <p>后门攻击</p>          </div><p>后门攻击希望达到的目的是在攻击者不进行操作的时候，普通用户可以正常使用分类器，即在大多数情况下分类器分类结果可靠，只有在特殊区域的样本会被错误分类，这使防御方也很难察觉这种攻击。<br><img src="/images/20201008-2/4.webp" alt="后门攻击"></p><h1 id="3-防御方案"><a href="#3-防御方案" class="headerlink" title="3 防御方案"></a>3 防御方案</h1><p>数据投毒问题可以说是关于“如何在噪音的环境中学习模型”问题的延伸，对于数据投毒还没有一个比较完善的防御方案。一般通过均匀采样、构建标准数据集以及集成学习来缓解攻击问题。</p><div class="note success">            <p>均匀采样</p>          </div><p>数据分布不均匀是导致数据投毒的根本原因，如果可以在训练模型时保证各类样本均匀分布，就可以从根本上杜绝这种攻击。但在真实的生产网络中实现均匀采样是难以实现的。</p><div class="note success">            <p>构建标准数据集</p>          </div><p>数据投毒一般用于攻击在线学习系统，如果我们构建一个样本集，在每次更新模型后，模型必须通过样本集的“考核”，即需要能以较高准确率分类标准数据集中的样本这次更新才会执行，确保模型不会因为一次集中的数据投毒而大幅改变分类边界。</p><div class="note success">            <p>集成学习技术</p>          </div><p>集成学习指同时训练多个机器学习模型，在识别待测样本时综合每个模型的的分类结果，给出最终分类判断。这种方式可以在一定程度上抵御数据投毒攻击。</p>]]></content>
    
    
    <summary type="html">数据投毒（Data Poisoning Attacks）指通过污染训练样本达到改变分类器边界的目的，数据投毒一般发生在线学习系统中。本文首先简要介绍了数据投毒技术，并分析了真实世界中的数据投毒攻击案例。然后详细说明了反馈化武器（feedback weaponization）、模型偏斜（model skewing）以及后门攻击（back door attacks）三种攻击方式的原理。最后简要分析了三种目前较为有效的模型窃取技术。</summary>
    
    
    
    <category term="科研总结" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="数据投毒" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8A%95%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——对抗攻击</title>
    <link href="http://example.com/2020/10/08/20201008-1/"/>
    <id>http://example.com/2020/10/08/20201008-1/</id>
    <published>2020-10-08T10:08:28.000Z</published>
    <updated>2020-10-09T01:42:42.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1 技术简介"></a>1 技术简介</h1><p>对抗攻击指通过特殊构造的输入使分类器结果不可靠。比如在一个交通路牌上贴一些黑白色块贴纸就可以让自动驾驶系统将其误判为绿灯标志。<br><img src="/images/20201008-1/1.webp" alt="对路牌做微小扰动就可以令自动驾驶系统将其误判为其它标志"><br>目前对于对抗样本产生的原因尚未有统一定论，<a href="https://arxiv.org/abs/1412.6572">Goodfellow 提出一种猜测</a>称深度神经网络在高维空间中的线性特征是产生对抗样本的根本原因。每层神经元的输出$ a=g(wx+b) $,实际上是在空间中的旋转、移动和拉伸。</p><span class="label primary">旋转</span>：使用权重$ w $进行线性变换；<br><br><span class="label primary">移动</span>：使用偏置$ b $进行平移；<br><br><span class="label primary">拉伸</span>：使用激活函数$ g $进行非线性变化。<br><br><p>对于简单的分类问题，在二维平面被拉伸可成可以通过直完成分割的分类布局，对于更复杂的问题，通过增加神经元，在高维空间进行分离。总之神经网络学习到的并非人类认知的底层逻辑，而仅仅是在高维空间中，通过一切扭曲变换使得样本可以被线性分割。<br><img src="/images/20201008-1/2.webp" alt="深度神经网络在高位空间的线性化是对抗样本的成因"><br>在如图的拉伸结果中，距离较大的地方可以认为其映射是连续的，但缠绕在一起的部分超平面已经无法连续。对抗样本正是在这类区域增加扰动，扰动虽然极其微小但对于分类器来说，样本早已跨越了分类界限。我们可以简单理解为在分类器边界对样本做一个微小的扰动，以改变样本类别。<br><img src="/images/20201008-1/3.webp" alt="边界样本更容易被对抗攻击"><br>用数学语言来理解，在训练分类器时，我们固定输入 $ x $ 和真实类别 $ y $，调整参数 $ \theta $ 使损失函数最小化，尽量缩小判别类别 $ f(x) $ 与真实类别 $ y $ 的距离。而在攻击一个已经训练好的分类器时，即分类器参数 $ \theta $ 确定，在保证真实类别 $ y $ 不变的条件下，调整 $ x $ 使得损失函数最大，即尽量拉大判别类别 $ f(x) $ 与真实类别 $ y $ 的距离，使分类器判别错误。那么如何能最大化损失函数呢？就是在损失函数于样本的梯度方向增加一个步长的扰动，此扰动要在足够微小以避免改变真实类别 $ y $ ，满足 $ L_{\infty} $约束$ ||x^*-x||_{\infty}\leq\epsilon  $ 以最小的步长达到分类器边界。则最终得到的对抗样本 $ x^* $ 为：</p><p>\[ x^*=x+\epsilon\cdot sign(\bigtriangledown_{x}J(\theta,x,y)) \]<br>其中 $ sign() $ 是符号函数，括号里面是损失函数对 $ x $ 的偏导，$ x $ 是输入的原始图片，$ x^* $ 是生成的对抗样本，$ J $ 是分类器的损失函数，$ y $ 是输入图片x的标签（真实类别）。<br><img src="/images/20201008-1/4.webp" alt="最大化损失函数以寻找对抗样本"></p><h1 id="2-攻击方案"><a href="#2-攻击方案" class="headerlink" title="2 攻击方案"></a>2 攻击方案</h1><p>已发现的对抗攻击技术可以分为用于白盒的梯度攻击和用于黑盒的优化攻击，根据攻击目的也可以分为置信度降低攻击、无目标攻击和有目标攻击。</p><div class="note danger">            <p>基于梯度的对抗攻击</p>          </div><p>如上所述，在白盒条件下，计算损失函数梯度并在此方向向样本中加入微量扰动。</p><div class="note danger">            <p>基于优化的对抗攻击</p>          </div><p>多用于黑盒环境，由于不知道模型参数所以无法计算梯度，退一步考虑怎样才能找到最小的扰动方式。比如使用GAN（生成对抗网络）使对抗样本分布向目标类别样本分布拟合，或者使用最优化算法在空间中寻找最优的扰动解集。</p><div class="note danger">            <p>置信度降低攻击</p>          </div><p>攻击者目标为使分类器对于某样本的置信度降低。比如从99%是A类降低到55%是A类。</p><div class="note danger">            <p>无目标攻击</p>          </div><p>攻击者目的为使分类器对于某样本的判别出现错误，但不关心错误分类与哪一类。比如使某原属于A类的样本被分类器分类与非A类。</p><div class="note danger">            <p>有目标攻击</p>          </div><p>攻击者目的为使分类器对于某样本的判别出现错误，且指定其错误分类于某类。比如使某原属于A类的样本被分类于B类。</p><h1 id="3-防御方案"><a href="#3-防御方案" class="headerlink" title="3 防御方案"></a>3 防御方案</h1><p>现有的防御手段有对抗训练、梯度隐藏、随机化以及去噪。</p><div class="note success">            <p>对抗训练技术</p>          </div><p>对已经训练完成的分类器计算生成对抗样本，并将对抗样本集加入模型训练集中，进一步加强训练分类器。此方案虽然可以抵御部分对抗样本，但并不能从根本上解决对抗攻击问题。对抗训练后的模型依旧可以找到可以攻击成功的对抗样本，并且不断的对抗训练会使分类边界不断扩大。</p><div class="note success">            <p>梯度隐藏</p>          </div><p>隐藏分类器返回的置信度信息，由于白盒对抗攻击通常使用分类器返回的置信度来调整扰动，辅助产生对抗样本。隐藏模型梯度可以增加攻击者难度。</p><div class="note success">            <p>模型随机化</p>          </div><p>本方案主要防御基于梯度的对抗攻击，将模型的输入进行随机化处理。比如对于图像识别分类器，每次给图片样本加一个宽度随机的边框，由于在模型训练时也进行这种处理，模型在分类时可以识别任意宽度边框的样本，但对于梯度攻击，不同宽度的边框会计算出完全不同的梯度，由于边框宽度是随机变化的，使得攻击者无法确定梯度方向。</p><div class="note success">            <p>样本去噪</p>          </div><p>此方案很直接，因为对抗模型实在原始样本中添加微小噪音扰动。那么为了防御这种攻击，在模型分类时，先对模型的输入进行去噪处理，去除攻击者为制造对抗样本而增加的噪音。然而目前并没有很完善的针对对抗攻击的去噪技术，一些去噪甚至会起到相反效果，使对抗攻击样本被误分类的置信度更高。</p>]]></content>
    
    
    <summary type="html">对抗攻击（Adversarial Attacks）指通过特殊构造的输入使分类器结果不可靠。本文首先简要介绍了对抗攻击技术以及其产生的原因。然后从白盒攻击与黑盒攻击两个角度进行了攻击面的分析。最后介绍了现有的一些防御与缓解攻击的方案。</summary>
    
    
    
    <category term="科研总结" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="对抗攻击" scheme="http://example.com/tags/%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>人工智能内生安全——背景介绍</title>
    <link href="http://example.com/2020/10/08/20201008/"/>
    <id>http://example.com/2020/10/08/20201008/</id>
    <published>2020-10-08T03:14:37.000Z</published>
    <updated>2020-10-09T01:19:17.992Z</updated>
    
    <content type="html"><![CDATA[<p>本编文章为笔者研究方向“面向网络流量的人工智能内生安全保护”的提纲。如今人工智能在各种传统分类识别问题上显示出强大能力。但由于其算法缺乏可解释性，人工智能系统在数据、算法、模型等多方面存在脆弱点。目前多数机器学习方法都假设其环境是良性的，但这种假设并不总是成立。本片文章将从信息安全三要素（完整性、可用性、机密性）角度分析现有人工智能系统存在的内生安全问题。</p><h1 id="1-工业界应用现状"><a href="#1-工业界应用现状" class="headerlink" title="1 工业界应用现状"></a>1 工业界应用现状</h1><p>人工智能内生安全指的是人工智能系统自身存在的脆弱性。如今越来越多的系统引入AI技术，它的确在传统分类识别问题上显示出强大的能力。但是由于其系统缺乏可解释性，AI在数据、算法、模型等多方面都存在脆弱点。目前工业界对其脆弱性的重视程度和对AI系统的保护远远不够。<br><img src="/images/20201008/1.webp" alt="在熊猫照片上加入微量噪音就能严重影响分类器性能"><br>在ICLR2015会议上Goodfellow展示了向熊猫图片中加入肉眼难以发现的微量干扰，，就可以严重影响分类器识别性能，将其识别为猿猴。这种技术如果用在攻击入侵检测系统或自动驾驶系统，将会带来灾难性的后果。<br><img src="/images/20201008/2.webp" alt="Google 垃圾邮件识别系统受到数据投毒攻击"><br>谷歌公司也曾多次受到针对其人工智能垃圾邮件识别系统的攻击，导致公司必须重新训练邮件分类器。谷歌垃圾邮件分类器使用在线学习技术，攻击者将大量垃圾邮件反馈为非垃圾邮件以达到干扰分类器性能的目的。图片中横轴为时间，纵轴为邮件数量，绿线表示用户手动标记为垃圾邮件，红线表示用户手动标记为非垃圾邮件。由于将标签决定权交给用户，而又没有有效的保护措施，导致了这次数据投毒攻击。<br>对人工智能系统的攻击测试与防御加固会受到越来越多的关注。目前已发现多种破坏机器学习模型的攻击手段，诸如对抗攻击、数据投毒、模型窃取等。而在网络入侵检测系统上的有效防御研究还远远不足。这给面向网络流量的人工智能内生安全保护带来了新的挑战。</p><h1 id="2-学术界研究现状"><a href="#2-学术界研究现状" class="headerlink" title="2 学术界研究现状"></a>2 学术界研究现状</h1><p>使用Web of Science统计关于人工智能内生安全的研究发现近几年研究人员在这方面的兴趣快速增长.<br><img src="/images/20201008/3.webp" alt="人工智能内生安全近年论文发表数量"><br><img src="/images/20201008/4.webp" alt="人工智能内生安全近年论文应用领域"><br>但是在入侵检测系统上的工作较少。从信息安全三要素角度考虑，破坏人工智能完整性的主要问题有对抗攻击和数据投毒；破坏人工智能系统可用性的主要从模型代码漏洞角度入手；破坏人工智能系统机密性的主要问题为模型窃取。<br><img src="/images/20201008/5.webp" alt="人工智能内生安全研究内容"><br>由于模型漏洞和具体代码实现有关，我们的研究主要从对抗攻击、数据投毒与模型窃取三个方面进行。您可以在以下的三篇文章中详细了解人针对工智能内生安全的主要攻击手段与目前提出的有效防御方案。</p><ul><li><a href="/2020/10/08/20201008-1/" title="人工智能内生安全——对抗攻击">人工智能内生安全——对抗攻击</a></li><li><a href="/2020/10/08/20201008-1/" title="人工智能内生安全——数据投毒">人工智能内生安全——数据投毒</a></li><li><a href="/2020/10/08/20201008-1/" title="人工智能内生安全——模型窃取">人工智能内生安全——模型窃取</a></li></ul><h1 id="3-推荐书目"><a href="#3-推荐书目" class="headerlink" title="3 推荐书目"></a>3 推荐书目</h1><p>最后推荐四本与人工智能内生安全相关的书籍。<br><img src="/images/20201008/6.webp" alt="人工智能安全推荐书目"><br>《人工智能安全》是方滨兴院士主编，在2020年6月份出版的书，内容很前沿甚至有些科幻。本书追求广度而非深度，适合作为入门书籍寻找兴趣点；<br>《Adversarial Machine Learning》是一本理论性很强的关于机器学习对抗攻击的书，其从拓扑学角度解释了机器学习算法内核以及对抗攻击产生的原理；<br>《Interpretable Machine Learning》是一本工程性很强的关于可解释机器学习的书，此书完整<a href="https://christophm.github.io/interpretable-ml-book">电子版</a>免费阅读，并有对应的<a href="https://github.com/christophM/interpretable-ml-book">GitHub开源项目</a>；<br>《Attacking Artificial Intelligence》是2019年哈佛大学的一份调查报告，其统计了学术界和工业界在人工智能安全方面的进展以及各国政府出台的关于AI安全的政策与法律，本书主要侧重于网络安全领域。</p>]]></content>
    
    
    <summary type="html">人工智能内生安全指的是人工智能系统自身存在的脆弱性。如今越来越多的系统引入AI技术，它的确在传统分类识别问题上显示出强大的能力。但是由于其系统缺乏可解释性，AI在数据、算法、模型等多方面都存在脆弱点。目前工业界对其脆弱性的重视程度和对AI系统的保护远远不够。</summary>
    
    
    
    <category term="科研总结" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/"/>
    
    <category term="人工智能" scheme="http://example.com/categories/%E7%A7%91%E7%A0%94%E6%80%BB%E7%BB%93/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="http://example.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="信息安全" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客教程</title>
    <link href="http://example.com/2020/10/06/20201006/"/>
    <id>http://example.com/2020/10/06/20201006/</id>
    <published>2020-10-06T11:06:43.000Z</published>
    <updated>2020-10-08T14:12:21.344Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h1><h2 id="1-1-注册-GitHub-账号"><a href="#1-1-注册-GitHub-账号" class="headerlink" title="1.1 注册 GitHub 账号"></a>1.1 注册 GitHub 账号</h2><p>访问 <a href="http://www.google.com/">GitHub 官网</a>注册 GitHub 账号并进行邮箱验证。<br><img src="/images/20201006/1.webp" alt="图 1"></p><h2 id="1-2-安装-Node-js-和-nmp"><a href="#1-2-安装-Node-js-和-nmp" class="headerlink" title="1.2 安装 Node.js 和 nmp"></a>1.2 安装 Node.js 和 nmp</h2><p>访问 <a href="https://nodejs.org/">Node.js 官网</a>安装 Node.js，nmp 是随同 Node.js 一起安装的包管理工具。<br><img src="/images/20201006/2.webp" alt="图 2"></p><h2 id="1-3-安装-Git-for-Windows"><a href="#1-3-安装-Git-for-Windows" class="headerlink" title="1.3 安装 Git for Windows"></a>1.3 安装 Git for Windows</h2><p>访问 <a href="https://gitforwindows.org/">Git 官网</a>安装 Git for Windows。<br><img src="/images/20201006/3.webp" alt="图 3"></p><h1 id="2-搭建-GitHub-博客"><a href="#2-搭建-GitHub-博客" class="headerlink" title="2 搭建 GitHub 博客"></a>2 搭建 GitHub 博客</h1><h2 id="2-1-创建-GitHub-仓库"><a href="#2-1-创建-GitHub-仓库" class="headerlink" title="2.1 创建 GitHub 仓库"></a>2.1 创建 GitHub 仓库</h2><p>新建一个 Repositories, 存放博客项目文件。<br><img src="/images/20201006/4.webp" alt="图 4"><br>新建一个名为“<span class="label warning">你的用户名.github.io</span>”的仓库。如果你的GIthub用户名是 <span class="label warning">test</span>，那么就新建 <span class="label warning">test.github.io</span>的仓库（必须是你的用户名，其它名称无效），由此可见，每一个 GitHub 账户最多只能创建一个这样可以直接使用域名访问的仓库。<br><img src="/images/20201006/5.webp" alt="图 5"><br>跳转到该库界面，选择 Settings。<br><img src="/images/20201006/6.webp" alt="图 6"><br>进入 Settings 后，下拉找到 GitHub pages 设置界面，点击 Choose a theme。<br><img src="/images/20201006/7.webp" alt="图 7"><br>选择一个博客主题，然后点击 Select theme。<br><img src="/images/20201006/8.webp" alt="图 8"><br>到这一步就已经可以访问自己的博客了。在地址栏输入：<span class="label warning">用户名.github.io</span> 就可以访问页面了。<br><img src="/images/20201006/9.webp" alt="图 9"></p><h2 id="2-2-配置-SSH-Key"><a href="#2-2-配置-SSH-Key" class="headerlink" title="2.2 配置 SSH Key"></a>2.2 配置 SSH Key</h2><p>在 Windows 菜单里搜索启动 Git Bash，设置 user.name 和 user.email 的配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的 GitHub 用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的 GitHub 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>生产SSH秘钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的 GitHub 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。<br>找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，用记事本打开并复制里面的内容。<br><img src="/images/20201006/10.webp" alt="图 10"><br>打开GitHub主页，进入个人设置 –&gt; SSH and GPG keys –&gt; New SSH key：<br>新建 New SSH key，将复制的内容粘贴到key中，title随便填，保存。<br><img src="/images/20201006/11.webp" alt="图 11"><br>启动 Git Bash 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connnecting (yes/no)?</span><br></pre></td></tr></table></figure><p>输入 <span class="label default"> yes</span>，然后会看到：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>看到这个信息说明 SSH 已配置成功！</p><h1 id="3-使用Hexo写博客"><a href="#3-使用Hexo写博客" class="headerlink" title="3 使用Hexo写博客"></a>3 使用Hexo写博客</h1><h2 id="3-1-安装Hexo"><a href="#3-1-安装Hexo" class="headerlink" title="3.1 安装Hexo"></a>3.1 安装Hexo</h2><p>在自己认为合适的地方创建博客文件夹，然后在该目录下右键点击 Git Bash Here，打开 Git 的控制台窗口，之后的所有操作都在 Git 控制台中进行，不要再使用 Windows 的控制台了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo <span class="comment"># 安装Hexo</span></span><br></pre></td></tr></table></figure><h2 id="3-2-初始化Hexo"><a href="#3-2-初始化Hexo" class="headerlink" title="3.2 初始化Hexo"></a>3.2 初始化Hexo</h2><p>仍在该目录下右键 Git Bash Here，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>输入以上命令后，hexo 会自动下载一些文件到这个目录，包括 node_modules，其中比较重要的几个文件的目录结构如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo s <span class="comment"># 开启本地预览服务</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 public 文件夹生成相关 html 文件，这些文件将来都会提交到 GitHub 中。<br>打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到博客内容，第一次初始化时Hexo已经自动生成了一篇名为 Hello World 的文章。<br><img src="/images/20201006/12.webp" alt="图 12"></p><h2 id="3-3-配置-Hexo"><a href="#3-3-配置-Hexo" class="headerlink" title="3.3 配置 Hexo"></a>3.3 配置 Hexo</h2><p>在 Hexo 中有两种主要配置文件，其名称都是 _config.yml。其中，一种位于站点根目录下，主要包含 Hexo 本身的配置；另一种位于主题目录下，这种配置文件由主题坐着提供，主要用于配置主题相关选项。为了描述方便，在以下说明中，将前者称为<span class="label info">站点配置文件</span>，后者称为 <span class="label primary">主题配置文件</span>。<br>修改<span class="label info">站点配置文件</span>中有关 deploy 的部分，注意将 username 修改为你的 GitHub 用户名：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>并安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>打开 Git Bash，输入 <span class="label danger">hexo d</span> 就会将本次所有改动的代码全部提交，没有改动的不会提交。<br>此时访问博客地址就和本地预览服务一样了。<br><img src="/images/20201006/13.webp" alt="图 13"></p><h2 id="3-4-写第一篇博文"><a href="#3-4-写第一篇博文" class="headerlink" title="3.4 写第一篇博文"></a>3.4 写第一篇博文</h2><p>定位到 Hexo 根目录，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;my-first-blog&#x27;</span></span><br></pre></td></tr></table></figure><p>Hexo 会在 _posts 下生成相关 md 文件。我们只需打开这个文件就可以编写博客了，一般完整格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，但可以修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空缺</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><h1 id="4-美化主题"><a href="#4-美化主题" class="headerlink" title="4 美化主题"></a>4 美化主题</h1><h2 id="4-1-下载-Next-主题"><a href="#4-1-下载-Next-主题" class="headerlink" title="4.1 下载 Next 主题"></a>4.1 下载 Next 主题</h2><p>以 Next 主题为例，如果你熟悉 Git，建议使用克隆最新版本的方式，之后的更新可以通过 <span class="label danger">git pull</span> 来快速更新，而不用再下载压缩包替换。<br>使用 Git Bash 定位到 Hexo 站点目录下。使用 Git checkout 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h2 id="4-2-启用主题"><a href="#4-2-启用主题" class="headerlink" title="4.2 启用主题"></a>4.2 启用主题</h2><p>打开<span class="label info">站点配置文件</span>，找到 theme 字段，并将其值改为 next。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>至此，Next 主题安装完成。下一步我们验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <span class="label danger">hexo clean</span> 命令来清除 Hexo 缓存。然后输入命令 <span class="label danger">hexo d</span> 开启本地预览服务，当命令行输出中提示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，检查站点是否正确运行。<br>当你看到站点的外观与下图所示类似时，说明已经成功安装 Next 主题。这是 Next 默认的 Scheme–Muse。<br><img src="/images/20201006/14.webp" alt="图 14"><br>执行 <span class="label danger">hexo d</span>提交代码。终于，我们的博客已经搭建完毕，后续可以进一步美化博客主题，并不断充实博客内容。您可以通过以下连个网址查询具体的网站与主题配置以进一步完善您的网站。<br><a href="https://hexo.io/">Hexo框架官方文档</a><br><a href="http://theme-next.iissnan.com/">Next主题官方文档</a></p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>开始耕耘你的网上花园吧！</p>            <i class="fa fa-quote-right"></i>          </blockquote>]]></content>
    
    
    <summary type="html">Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</summary>
    
    
    
    <category term="工具教程" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
